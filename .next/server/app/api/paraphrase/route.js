"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/paraphrase/route";
exports.ids = ["app/api/paraphrase/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fparaphrase%2Froute&page=%2Fapi%2Fparaphrase%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fparaphrase%2Froute.ts&appDir=C%3A%5CUsers%5CDave%5CDesktop%5Cnew_Stylesync%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDave%5CDesktop%5Cnew_Stylesync&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fparaphrase%2Froute&page=%2Fapi%2Fparaphrase%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fparaphrase%2Froute.ts&appDir=C%3A%5CUsers%5CDave%5CDesktop%5Cnew_Stylesync%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDave%5CDesktop%5Cnew_Stylesync&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Dave_Desktop_new_Stylesync_src_app_api_paraphrase_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/paraphrase/route.ts */ \"(rsc)/./src/app/api/paraphrase/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/paraphrase/route\",\n        pathname: \"/api/paraphrase\",\n        filename: \"route\",\n        bundlePath: \"app/api/paraphrase/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Dave\\\\Desktop\\\\new_Stylesync\\\\src\\\\app\\\\api\\\\paraphrase\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Dave_Desktop_new_Stylesync_src_app_api_paraphrase_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/paraphrase/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwYXJhcGhyYXNlJTJGcm91dGUmcGFnZT0lMkZhcGklMkZwYXJhcGhyYXNlJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGcGFyYXBocmFzZSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNEYXZlJTVDRGVza3RvcCU1Q25ld19TdHlsZXN5bmMlNUNzcmMlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q0RhdmUlNUNEZXNrdG9wJTVDbmV3X1N0eWxlc3luYyZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDNEI7QUFDekc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHlsZXN5bmMvPzA3MWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcRGF2ZVxcXFxEZXNrdG9wXFxcXG5ld19TdHlsZXN5bmNcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxccGFyYXBocmFzZVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcGFyYXBocmFzZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3BhcmFwaHJhc2VcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3BhcmFwaHJhc2Uvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxEYXZlXFxcXERlc2t0b3BcXFxcbmV3X1N0eWxlc3luY1xcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxwYXJhcGhyYXNlXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9wYXJhcGhyYXNlL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fparaphrase%2Froute&page=%2Fapi%2Fparaphrase%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fparaphrase%2Froute.ts&appDir=C%3A%5CUsers%5CDave%5CDesktop%5Cnew_Stylesync%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDave%5CDesktop%5Cnew_Stylesync&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/paraphrase/route.ts":
/*!*****************************************!*\
  !*** ./src/app/api/paraphrase/route.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var _lib_paraphrase_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/paraphrase.ts */ \"(rsc)/./src/lib/paraphrase.ts\");\n/* harmony import */ var _lib_styleRules_ts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/styleRules.ts */ \"(rsc)/./src/lib/styleRules.ts\");\n/* harmony import */ var _lib_rateLimit_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/rateLimit.ts */ \"(rsc)/./src/lib/rateLimit.ts\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n\n\n\n\nconst bodySchema = zod__WEBPACK_IMPORTED_MODULE_3__.object({\n    text: zod__WEBPACK_IMPORTED_MODULE_3__.string().min(1).max(8000),\n    useModel: zod__WEBPACK_IMPORTED_MODULE_3__.boolean().optional(),\n    profile: zod__WEBPACK_IMPORTED_MODULE_3__.any().optional(),\n    debug: zod__WEBPACK_IMPORTED_MODULE_3__.boolean().optional()\n});\nconst runtime = \"nodejs\";\nasync function POST(req) {\n    try {\n        // Rate limit by IP (replace with user ID after auth integration)\n        const ip = req.headers.get(\"x-forwarded-for\")?.split(\",\")[0]?.trim() || req.headers.get(\"x-real-ip\") || \"unknown\";\n        const rl = (0,_lib_rateLimit_ts__WEBPACK_IMPORTED_MODULE_2__.rateLimit)(`paraphrase:${ip}`);\n        if (rl.limited) {\n            return new Response(JSON.stringify({\n                error: \"Rate limit exceeded. Try later.\"\n            }), {\n                status: 429,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    ...(0,_lib_rateLimit_ts__WEBPACK_IMPORTED_MODULE_2__.formatRateLimitHeaders)(rl)\n                }\n            });\n        }\n        const json = await req.json();\n        const { text, useModel, profile, debug } = bodySchema.parse(json);\n        let output;\n        // Simple API key auth for production usage gating (add per-user auth separately)\n        const apiKeyHeader = req.headers.get(\"x-api-key\");\n        const serverApiKey = process.env.STYLESYNC_API_KEY;\n        const authorized = !!(serverApiKey && apiKeyHeader && apiKeyHeader === serverApiKey);\n        // Allow AI model in development mode or when properly authorized\n        const isDevelopment = \"development\" !== \"production\";\n        console.log(\"=== AUTHORIZATION DEBUG ===\");\n        console.log(\"Environment:\", \"development\");\n        console.log(\"Is development:\", isDevelopment);\n        console.log(\"Has server API key:\", !!serverApiKey);\n        console.log(\"Has client API key header:\", !!apiKeyHeader);\n        console.log(\"Keys match:\", authorized);\n        console.log(\"Has GROQ key:\", !!process.env.GROQ_API_KEY);\n        const allowModel = (isDevelopment || authorized) && process.env.GROQ_API_KEY;\n        console.log(\"allowModel result:\", allowModel);\n        console.log(\"useModel from request:\", useModel);\n        let usedAIModel = false;\n        if (allowModel && (useModel ?? true)) {\n            console.log(\"=== USING AI MODEL ===\");\n            output = await modelParaphraseGroq(text, profile);\n            usedAIModel = true;\n        } else {\n            console.log(\"=== USING FALLBACK ===\", \"allowModel:\", allowModel, \"useModel:\", useModel);\n            output = (0,_lib_paraphrase_ts__WEBPACK_IMPORTED_MODULE_0__.paraphraseWithProfile)(text, profile);\n        }\n        // Verification & iterative humanization (returns metrics).\n        const lexiconOptions = {\n            includeLexiconNotes: !usedAIModel\n        };\n        console.log(\"Passing lexicon options:\", lexiconOptions);\n        const { output: finalOut, metrics } = (0,_lib_paraphrase_ts__WEBPACK_IMPORTED_MODULE_0__.verifyAndFinalize)(output, profile, 2, lexiconOptions);\n        console.log(\"Before finalizeOutput, usedAIModel:\", usedAIModel);\n        const fin = (0,_lib_paraphrase_ts__WEBPACK_IMPORTED_MODULE_0__.finalizeOutput)(finalOut, profile, lexiconOptions);\n        const resultText = typeof fin === \"string\" ? fin : fin.text;\n        // COMPREHENSIVE CLEANUP PIPELINE - Remove lexicon notes and validate structure\n        let cleanedResultText = finalLexiconCleanup(resultText);\n        cleanedResultText = validateAndFixSentenceStructure(cleanedResultText);\n        const allowDebug = debug && (authorized || \"development\" !== \"production\");\n        const actions = allowDebug ? typeof fin === \"string\" ? [] : fin.actions : [];\n        const payload = {\n            result: cleanedResultText,\n            usedModel: !!allowModel\n        };\n        if (allowDebug) payload.metrics = metrics;\n        if (allowDebug && actions.length) payload.actions = actions;\n        return new Response(JSON.stringify(payload), {\n            status: 200,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...(0,_lib_rateLimit_ts__WEBPACK_IMPORTED_MODULE_2__.formatRateLimitHeaders)(rl)\n            }\n        });\n    } catch (err) {\n        return new Response(JSON.stringify({\n            error: err.message || \"Bad Request\"\n        }), {\n            status: 400\n        });\n    }\n}\nasync function modelParaphraseGroq(text, profile) {\n    try {\n        const GroqMod = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/tr46\"), __webpack_require__.e(\"vendor-chunks/whatwg-url\"), __webpack_require__.e(\"vendor-chunks/webidl-conversions\"), __webpack_require__.e(\"vendor-chunks/formdata-node\"), __webpack_require__.e(\"vendor-chunks/groq-sdk\"), __webpack_require__.e(\"vendor-chunks/form-data-encoder\"), __webpack_require__.e(\"vendor-chunks/agentkeepalive\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/ms\"), __webpack_require__.e(\"vendor-chunks/humanize-ms\"), __webpack_require__.e(\"vendor-chunks/event-target-shim\"), __webpack_require__.e(\"vendor-chunks/abort-controller\")]).then(__webpack_require__.bind(__webpack_require__, /*! groq-sdk */ \"(rsc)/./node_modules/groq-sdk/index.mjs\"));\n        const Groq = GroqMod.default ?? GroqMod.Groq;\n        const client = new Groq({\n            apiKey: process.env.GROQ_API_KEY\n        });\n        const model = process.env.GROQ_MODEL || \"llama3-70b-8192\";\n        const temperature = Number(process.env.GROQ_TEMPERATURE || 0.3); // Lower temperature for more focused output\n        const system = buildSystemPrompt(profile);\n        const completion = await client.chat.completions.create({\n            model,\n            temperature,\n            max_tokens: Math.min(2000, Math.max(100, text.length * 2)),\n            messages: [\n                {\n                    role: \"system\",\n                    content: system\n                },\n                {\n                    role: \"user\",\n                    content: `Paraphrase the text below maintaining the EXACT same meaning. Focus on mimicking the user's sentence construction patterns, clause usage, and punctuation habits. Pay attention to how sentences are built: their complexity, conjunction usage, modifier placement, and overall flow. \r\n\r\nCRITICAL: The meaning must stay identical. Do not add, remove, or change any facts, concepts, or ideas. Only change the wording and sentence structure while preserving all original information.\r\n\r\nOutput ONLY the rewritten text itself with no preface, explanation, notes, or commentary.\r\n\r\nText:\r\n${text}`\n                }\n            ]\n        });\n        const raw = completion.choices?.[0]?.message?.content?.trim() || \"\";\n        console.log(\"AI raw response:\", JSON.stringify(raw.slice(-100)));\n        let cleaned = (0,_lib_paraphrase_ts__WEBPACK_IMPORTED_MODULE_0__.humanizeText)(sanitizeModelOutput(raw));\n        // Clean up excessive comma patterns that appear when lexicon is empty\n        cleaned = cleanupCommaPatterns(cleaned);\n        console.log(\"Final cleaned result:\", JSON.stringify(cleaned.slice(-100)));\n        // If AI provided content, use it; otherwise fallback without lexicon notes\n        if (cleaned && cleaned.length > 10) {\n            return cleaned;\n        } else {\n            console.log(\"AI response was empty/short, using fallback\");\n            return (0,_lib_paraphrase_ts__WEBPACK_IMPORTED_MODULE_0__.paraphraseWithProfile)(text, profile, {\n                includeLexiconNotes: false\n            });\n        }\n    } catch (e) {\n        console.log(\"AI request failed, using fallback:\", e?.message || e);\n        return (0,_lib_paraphrase_ts__WEBPACK_IMPORTED_MODULE_0__.paraphraseWithProfile)(text, profile, {\n            includeLexiconNotes: false\n        });\n    }\n}\nfunction cleanupCommaPatterns(text) {\n    if (!text) return text;\n    let cleaned = text;\n    console.log(\"COMMA CLEANUP - Before:\", JSON.stringify(cleaned));\n    // Fix excessive comma patterns like \",,,\" which appear when lexicon words are missing\n    // Handle all variations of comma spacing patterns\n    // 1. Multiple commas with any spacing - most comprehensive first\n    cleaned = cleaned.replace(/,\\s*,\\s*,+/g, \",\"); // \",  , ,\" or \", ,,\" -> \",\"\n    cleaned = cleaned.replace(/,\\s*,\\s*/g, \",\"); // \", ,\" -> \",\"\n    cleaned = cleaned.replace(/,{2,}/g, \",\"); // \",,\" -> \",\"\n    // 2. Fix the specific patterns we're seeing: \"data , uncovering insights , , that\"\n    cleaned = cleaned.replace(/(\\w+)\\s*,\\s*,\\s*,\\s*(\\w+)/g, \"$1, $2\"); // \"word , , , word\" -> \"word, word\"\n    cleaned = cleaned.replace(/(\\w+)\\s*,\\s*,\\s*(\\w+)/g, \"$1, $2\"); // \"word , , word\" -> \"word, word\"\n    // 3. Handle patterns where comma appears before conjunctions/words\n    cleaned = cleaned.replace(/,\\s*,\\s*,\\s*(that|which|who|when|where|how|why)\\b/gi, \", $1\");\n    cleaned = cleaned.replace(/,\\s*,\\s*(that|which|who|when|where|how|why)\\b/gi, \", $1\");\n    // 4. Fix patterns around conjunctions\n    cleaned = cleaned.replace(/\\b(and|but|or|so|yet|for)\\s*,\\s*,\\s*,/gi, \"$1\");\n    cleaned = cleaned.replace(/\\b(and|but|or|so|yet|for)\\s*,\\s*,/gi, \"$1\");\n    // 5. Handle patterns at sentence boundaries\n    cleaned = cleaned.replace(/,\\s*,\\s*,\\s*([.!?])/g, \"$1\"); // \", , .\" -> \".\"\n    cleaned = cleaned.replace(/,\\s*,\\s*([.!?])/g, \"$1\"); // \", .\" -> \".\"\n    // 6. Clean up any remaining double commas that might have been created\n    cleaned = cleaned.replace(/,\\s*,/g, \",\");\n    // 7. Fix spacing around commas (normalize)\n    cleaned = cleaned.replace(/\\s*,\\s*/g, \", \");\n    // 8. Remove trailing comma patterns and fix sentence endings\n    cleaned = cleaned.replace(/,\\s*,\\s*,?\\s*$/g, \"\");\n    cleaned = cleaned.replace(/,\\s*$/g, \"\");\n    // 9. Handle edge cases with specific problematic patterns\n    cleaned = cleaned.replace(/\\b(process|inform|spark|ensure|produce|create|develop)\\s+,\\s*,\\s*/gi, \"$1 \");\n    cleaned = cleaned.replace(/\\b(data|insights|decisions|art|music|literature|innovation|technology)\\s*,\\s*,\\s*/gi, \"$1 \");\n    console.log(\"COMMA CLEANUP - After:\", JSON.stringify(cleaned));\n    return cleaned.trim();\n}\nfunction buildSystemPrompt(profile) {\n    const base = _lib_styleRules_ts__WEBPACK_IMPORTED_MODULE_1__.STYLE_RULE_PROMPT + \"\\n\\nCRITICAL: Preserve the exact meaning and all factual content. No fabrication of facts. Focus on sentence construction patterns rather than specific vocabulary. Maintain natural language flow and readability above all else.\";\n    if (!profile) return base;\n    let stylePrompt = base + `\\nProfile cues: Tone=${profile.tone}; Formality=${profile.formality}; Pacing=${profile.pacing}; Descriptiveness=${profile.descriptiveness}; Directness=${profile.directness}`;\n    // Add custom lexicon as optional vocabulary hints (with strong warnings)\n    if (profile.customLexicon && profile.customLexicon.length > 0) {\n        stylePrompt += `\\n\\nVOCABULARY SUGGESTIONS (USE SPARINGLY): The user occasionally prefers these words: ${profile.customLexicon.join(\", \")}. These are OPTIONAL suggestions - only use them if they naturally replace existing words and maintain identical meaning. NEVER insert them where they don't belong or change the meaning. If they don't fit naturally, ignore them completely. Clear, accurate writing is always more important than using any specific vocabulary.`;\n    } else {\n        // When no custom lexicon, be explicit about not adding unnecessary words or commas\n        stylePrompt += `\\n\\nNO CUSTOM VOCABULARY: Write naturally without trying to insert specific vocabulary words. Do not use placeholder commas or awkward insertions. Focus purely on clear, natural language that matches the user's sentence construction patterns.`;\n    }\n    // Add detailed sample style analysis if available\n    if (profile.sampleExcerpt && profile.styleAnalysis) {\n        const analysis = profile.styleAnalysis;\n        console.log(\"Style Analysis received:\", JSON.stringify(analysis, null, 2));\n        stylePrompt += \"\\n\\nWRITING STYLE PATTERNS TO MIMIC:\";\n        stylePrompt += `\\n- Sentence length: Average ${Math.round(analysis.avgSentenceLength)} words (±${Math.round(analysis.sentenceLengthStd)})`;\n        stylePrompt += `\\n- Word complexity: Average word length ${Math.round(analysis.avgWordLength)} chars, vocabulary complexity ${(analysis.vocabularyComplexity * 100).toFixed(1)}%`;\n        if (analysis.usesContractions) {\n            stylePrompt += \"\\n- Uses contractions (don't, it's, etc.)\";\n        } else {\n            stylePrompt += \"\\n- Avoids contractions (formal writing)\";\n        }\n        if (analysis.preferredTransitions && analysis.preferredTransitions.length > 0) {\n            stylePrompt += `\\n- Preferred transitions: ${analysis.preferredTransitions.slice(0, 3).join(\", \")}`;\n        }\n        if (analysis.questionRatio > 0.1) {\n            stylePrompt += `\\n- Uses questions frequently (${(analysis.questionRatio * 100).toFixed(1)}% of sentences)`;\n        }\n        if (analysis.exclamatoryRatio > 0.1) {\n            stylePrompt += `\\n- Uses exclamations frequently (${(analysis.exclamatoryRatio * 100).toFixed(1)}% of sentences)`;\n        }\n        if (analysis.commonStarters && analysis.commonStarters.length > 0) {\n            stylePrompt += `\\n- Common sentence starters: ${analysis.commonStarters.slice(0, 3).join(\", \")}`;\n        }\n        stylePrompt += `\\n- Personal voice: ${analysis.personalVoice} perspective`;\n        stylePrompt += `\\n- Tone tendency: ${analysis.toneBalance}`;\n        if (analysis.conjunctionDensity > 1) {\n            stylePrompt += \"\\n- Uses many connecting words (and, but, because, etc.)\";\n        }\n        if (analysis.adjectiveDensity > 0.1) {\n            stylePrompt += `\\n- Descriptive writing style (${(analysis.adjectiveDensity * 100).toFixed(1)}% descriptive words)`;\n        } else {\n            stylePrompt += \"\\n- Concise, minimal descriptive language\";\n        }\n        // REMOVED: Don't mention specific adverbs in the prompt as they get injected\n        // SENTENCE CONSTRUCTION PATTERNS\n        if (analysis.constructionPatterns) {\n            stylePrompt += \"\\n\\nSENTENCE CONSTRUCTION STYLE:\";\n            if (analysis.constructionPatterns.subordinateClauseRatio > 0.3) {\n                stylePrompt += `\\n- Frequently uses subordinate clauses (${(analysis.constructionPatterns.subordinateClauseRatio * 100).toFixed(0)}% of sentences) with words like \"because\", \"although\", \"when\"`;\n            }\n            if (analysis.constructionPatterns.coordinateClauseRatio > 0.3) {\n                stylePrompt += `\\n- Often connects ideas with coordinating conjunctions (${(analysis.constructionPatterns.coordinateClauseRatio * 100).toFixed(0)}% of sentences) using \"and\", \"but\", \"or\"`;\n            }\n            if (analysis.constructionPatterns.parentheticalRatio > 0.2) {\n                stylePrompt += `\\n- Uses parenthetical elements and asides (${(analysis.constructionPatterns.parentheticalRatio * 100).toFixed(0)}% of sentences)`;\n            }\n            if (analysis.constructionPatterns.frontLoadedDependentRatio > 0.2) {\n                stylePrompt += `\\n- Often starts sentences with dependent clauses (${(analysis.constructionPatterns.frontLoadedDependentRatio * 100).toFixed(0)}% of sentences)`;\n            }\n            if (analysis.avgClausesPerSentence > 2) {\n                stylePrompt += `\\n- Complex sentence structure averaging ${analysis.avgClausesPerSentence.toFixed(1)} clauses per sentence`;\n            }\n            if (analysis.parallelStructureRatio > 0.1) {\n                stylePrompt += `\\n- Uses parallel structure patterns (${(analysis.parallelStructureRatio * 100).toFixed(0)}% of sentences) like \"X, Y, and Z\"`;\n            }\n        }\n        // PUNCTUATION AND MODIFIER PATTERNS\n        if (analysis.punctuationPatterns) {\n            if (analysis.punctuationPatterns.dashUsage > 0) {\n                stylePrompt += `\\n- Uses dashes for emphasis or breaks (${analysis.punctuationPatterns.dashUsage} times)`;\n            }\n            if (analysis.punctuationPatterns.colonUsage > 0) {\n                stylePrompt += `\\n- Uses colons for explanations (${analysis.punctuationPatterns.colonUsage} times)`;\n            }\n        }\n        if (analysis.modifierPatterns) {\n            if (analysis.modifierPatterns.frontLoadedAdverbs > 0.1) {\n                stylePrompt += `\\n- Often starts sentences with adverbs (${(analysis.modifierPatterns.frontLoadedAdverbs * 100).toFixed(0)}% of sentences)`;\n            }\n            if (analysis.modifierPatterns.midSentenceAdverbs > 0.1) {\n                stylePrompt += `\\n- Places adverbs mid-sentence for flow (${(analysis.modifierPatterns.midSentenceAdverbs * 100).toFixed(0)}% of sentences)`;\n            }\n        }\n        stylePrompt += \"\\n\\nMATCH THESE PATTERNS: Replicate the sentence construction style, clause patterns, punctuation habits, and modifier placement shown above. Focus on HOW sentences are built, not just word choice.\";\n    }\n    // Add final instructions to prevent lexicon notes in output\n    stylePrompt += '\\n\\nCRITICAL OUTPUT RULES:\\n1. Output ONLY the paraphrased text. No notes, labels, explanations, or lists.\\n2. Do NOT include phrases like \"Lexicon notes:\", \"Words used:\", \"Vocabulary:\", etc.\\n3. Do NOT mention or list any vocabulary words used.\\n4. NEVER insert vocabulary words where they break sentence structure or change meaning.\\n5. Do NOT use excessive commas or placeholder punctuation - write naturally.\\n6. The response must contain ONLY the clean paraphrased content - nothing else.\\n7. Preserve all original facts, concepts, and meaning exactly.\\n8. Use proper comma placement only where grammatically appropriate - avoid comma clusters like \",,,\" or unnecessary comma insertions.';\n    return stylePrompt;\n}\nfunction sanitizeModelOutput(s) {\n    if (!s) return s;\n    console.log(\"BEFORE sanitization:\", JSON.stringify(s.slice(0, 150), null, 2));\n    console.log(\"BEFORE sanitization (end):\", JSON.stringify(s.slice(-150)));\n    // Remove leading common prefaces and prompt leakage\n    s = s.replace(/^\\s*(Here(?:'| i)s[^\\n]*?:?\\s*)/i, \"\");\n    s = s.replace(/^\\s*(Paraphrased (?:version|text)[:\\-]?\\s*)/i, \"\");\n    s = s.replace(/^\\s*(I(?:'ve| have)[^\\n]*?:?\\s*)/i, \"\");\n    s = s.replace(/^\\s*(A rewritten version of the text:\\s*)/i, \"\");\n    s = s.replace(/^\\s*(Rewritten version:\\s*)/i, \"\");\n    s = s.replace(/^\\s*(The rewritten text:\\s*)/i, \"\");\n    // Remove any system prompt leakage at the beginning\n    s = s.replace(/^\\s*(?:System|Assistant|User):\\s*/i, \"\");\n    s = s.replace(/^\\s*(?:Paraphrase|Rewrite)[^\\n]*?:\\s*/i, \"\");\n    // AGGRESSIVE: Remove problematic lexicon word insertions that break sentences\n    // These are appearing as insertions like \"factually especially\" or \"in especially\"\n    s = s.replace(/\\b(?:factually|especially|clearly|confidently|frequently)\\s+(?:factually|especially|clearly|confidently|frequently)\\b/gi, \"\");\n    s = s.replace(/\\b(?:in|at|of|to|with|by|for|from|into|onto|upon|during|before|after|through|across|around|between|among|within|without|beneath|beside|behind|beyond|above|below)\\s+(?:factually|especially|clearly|confidently|frequently)\\b/gi, \"$1\");\n    s = s.replace(/\\b(?:factually|especially|clearly|confidently|frequently)\\s+(?:in|at|of|to|with|by|for|from|into|onto|upon|during|before|after|through|across|around|between|among|within|without|beneath|beside|behind|beyond|above|below)\\b/gi, \"$2\");\n    // Remove lexicon words that are inserted in grammatically wrong places\n    s = s.replace(/\\b(\\w+)\\s+(factually|especially|clearly|confidently|frequently)\\s+(is|are|was|were|will|would|can|could|has|have|had|do|does|did)\\b/gi, \"$1 $3\");\n    s = s.replace(/\\b(Artificial|Digital|Virtual|Social|Global|National|International|Local|Regional|Modern|Ancient|Current|Recent|Future|Past|Present)\\s+(factually|especially|clearly|confidently|frequently)\\s+(intelligence|media|reality|network|system|technology|development|advancement|progress|change)\\b/gi, \"$1 $3\");\n    // Remove trailing explanation sections\n    const splitMarkers = /(\\n\\n(?:I['\\s]?(?:ve| have) maintained|Tone:|Formality:|Pacing:|Descriptiveness:|Directness:|Note:|This maintains|The rewritten))/i;\n    const m = s.split(splitMarkers);\n    if (m.length > 1) {\n        s = m[0].trim();\n    }\n    // Remove lexicon notes that might appear at the end\n    s = s.replace(/\\n\\n?(?:Lexicon notes?:.*|Preferred (?:vocabulary|words?):.*|Custom lexicon:.*)$/gmi, \"\");\n    s = s.replace(/\\n\\n?(?:Words? used:.*|Vocabulary applied:.*|Lexicon:.*|Custom words?:.*)$/gmi, \"\");\n    // More aggressive lexicon note removal - handle various formats\n    s = s.replace(/\\s*Lexicon notes?:\\s*[^\\n]*$/gmi, \"\");\n    s = s.replace(/\\s*(?:Custom )?[Ll]exicon:\\s*[^\\n]*$/gmi, \"\");\n    s = s.replace(/\\s*(?:Preferred|Custom) (?:vocabulary|words?):\\s*[^\\n]*$/gmi, \"\");\n    // SUPER AGGRESSIVE: Remove the exact pattern we're seeing\n    s = s.replace(/\\s*\\.?\\s*Lexicon notes:\\s*especially,\\s*clearly,\\s*confidently,\\s*factually,\\s*frequently\\s*$/gi, \"\");\n    s = s.replace(/\\s*especially,\\s*clearly,\\s*confidently,\\s*factually,\\s*frequently\\s*$/gi, \"\");\n    // Fix excessive comma patterns that appear when lexicon words are missing\n    s = s.replace(/,\\s*,\\s*,/g, \"\"); // Remove triple commas\n    s = s.replace(/,\\s*,/g, \",\"); // Fix double commas to single\n    s = s.replace(/\\s+,/g, \",\"); // Fix space before comma\n    s = s.replace(/,{2,}/g, \",\"); // Multiple commas to single\n    // Handle the specific problematic patterns we're seeing\n    s = s.replace(/(\\w+)\\s*,\\s*,\\s*,\\s*(that|which|who|when|where)/gi, \"$1, $2\");\n    s = s.replace(/(\\w+)\\s*,\\s*,\\s*(that|which|who|when|where)/gi, \"$1, $2\");\n    s = s.replace(/(\\w+)\\s*,\\s*,\\s*(inform|spark|ensure|produce|create)/gi, \"$1 $2\");\n    // Remove comma patterns that appear when words are missing\n    s = s.replace(/(\\w+),\\s*,\\s*,\\s*(\\w+)/g, \"$1, $2\");\n    s = s.replace(/(\\w+)\\s+,\\s*,\\s*,/g, \"$1\");\n    s = s.replace(/,\\s*,\\s*,\\s*([.!?])/g, \"$1\");\n    // Clean up comma patterns around specific words that commonly get mangled\n    s = s.replace(/\\b(uncovering|producing|creating|ensuring|developing)\\s+(insights|art|music|innovation)\\s*,\\s*,\\s*/gi, \"$1 $2 \");\n    s = s.replace(/\\b(process|analyze|examine|evaluate)\\s+(data|information|content)\\s*,\\s*,\\s*/gi, \"$1 $2 \");\n    // Remove specific lexicon word patterns (not any random word lists)\n    const lexiconWords = [\n        \"especially\",\n        \"clearly\",\n        \"confidently\",\n        \"factually\",\n        \"frequently\"\n    ];\n    const lexiconPattern = lexiconWords.join(\"|\");\n    // Only remove word lists if they contain lexicon words\n    s = s.replace(new RegExp(`\\\\s+(?:${lexiconPattern})(?:,\\\\s*(?:${lexiconPattern}|\\\\w+)){2,}\\\\s*$`, \"gi\"), \"\");\n    // Strip trailing explanation that starts with bullets or dashes\n    s = s.replace(/\\n\\n(?:[-*•]\\s.*)+$/gms, \"\");\n    s = s.replace(/\\n\\n(?:Note:|This|The above).*$/gms, \"\");\n    // Remove any standalone lexicon mentions anywhere in the text\n    s = s.replace(/\\b(?:Lexicon|Custom lexicon|Preferred vocabulary):\\s*[^\\n]*(?:\\n|$)/gi, \"\");\n    // Final cleanup - remove any remaining lexicon word combinations at the end\n    s = s.replace(new RegExp(`\\\\s+(?:${lexiconPattern})(?:\\\\s*,\\\\s*(?:${lexiconPattern}))*\\\\s*$`, \"gi\"), \"\");\n    // Remove specific pattern \"clearly, confidently. frequently.\" and variations\n    s = s.replace(/\\s*clearly,\\s*confidently\\.?\\s*frequently\\.?\\s*$/gi, \"\");\n    s = s.replace(/\\s*,?\\s*clearly,\\s*confidently\\.?\\s*frequently\\.?\\s*$/gi, \"\");\n    // Remove any trailing fragment with these specific lexicon words only\n    s = s.replace(new RegExp(`\\\\s*(?:${lexiconPattern})(?:\\\\s*,\\\\s*(?:${lexiconPattern}))*\\\\.?\\\\s*$`, \"gi\"), \"\");\n    // Remove repetitive word patterns (basic detection)\n    s = s.replace(/\\b(\\w+)(\\s+\\1){2,}\\b/gi, \"$1\");\n    // Remove incomplete sentences at the end\n    const sentences = s.split(/(?<=[.!?])\\s+/);\n    if (sentences.length > 1) {\n        const lastSentence = sentences[sentences.length - 1];\n        if (!/[.!?]$/.test(lastSentence.trim()) && lastSentence.trim().length < 20) {\n            sentences.pop();\n            s = sentences.join(\" \");\n        }\n    }\n    const finalResult = s.trim();\n    console.log(\"AFTER sanitization:\", JSON.stringify(finalResult.slice(-100)));\n    return finalResult;\n}\nfunction finalLexiconCleanup(text) {\n    if (!text) return text;\n    let cleaned = text;\n    console.log(\"FINAL CLEANUP - Before:\", JSON.stringify(cleaned.slice(-100)));\n    // SURGICAL APPROACH: Only remove specific lexicon patterns, preserve legitimate text\n    // 1. Remove exact lexicon note patterns (most specific first)\n    cleaned = cleaned.replace(/\\s+especially,\\s*clearly\\.\\s*confidently\\s*$/gi, \"\");\n    cleaned = cleaned.replace(/\\s+especially,\\s*clearly,?\\s*confidently\\s*$/gi, \"\");\n    cleaned = cleaned.replace(/\\s*\\.?\\s*Lexicon notes?:\\s*[^\\n]*$/gi, \"\");\n    // 2. Remove complete lexicon word sequences only at the very end\n    cleaned = cleaned.replace(/\\s*especially,?\\s*clearly,?\\s*confidently,?\\s*factually,?\\s*frequently\\.?\\s*$/gi, \"\");\n    cleaned = cleaned.replace(/\\s*clearly,?\\s*confidently\\.?\\s*frequently\\.?\\s*$/gi, \"\");\n    cleaned = cleaned.replace(/\\s*confidently\\.?\\s*frequently\\.?\\s*$/gi, \"\");\n    // 3. Remove only specific lexicon words when they appear as trailing fragments\n    // But only if they're clearly lexicon notes (with specific punctuation patterns)\n    const lexiconWords = [\n        \"especially\",\n        \"clearly\",\n        \"confidently\",\n        \"factually\",\n        \"frequently\"\n    ];\n    for (const word of lexiconWords){\n        // Only remove if it's clearly a trailing fragment with comma/period patterns\n        cleaned = cleaned.replace(new RegExp(`\\\\s*,\\\\s*${word}\\\\s*\\\\.?\\\\s*$`, \"gi\"), \"\");\n        cleaned = cleaned.replace(new RegExp(`\\\\s*\\\\.\\\\s*${word}\\\\s*$`, \"gi\"), \"\");\n    }\n    // 4. Remove sequences of exactly these lexicon words (not any random words)\n    const lexiconPattern = `\\\\b(?:${lexiconWords.join(\"|\")})\\\\b`;\n    cleaned = cleaned.replace(new RegExp(`\\\\s*,?\\\\s*${lexiconPattern}(?:\\\\s*[,.]\\\\s*${lexiconPattern})*\\\\s*\\\\.?\\\\s*$`, \"gi\"), \"\");\n    // 5. Clean up trailing punctuation only if it looks malformed\n    cleaned = cleaned.replace(/\\s*[,]+\\s*$/, \"\"); // Remove trailing commas\n    cleaned = cleaned.replace(/\\s*\\.{2,}\\s*$/, \".\"); // Fix multiple periods to single period\n    cleaned = cleaned.trim();\n    // 6. Ensure proper sentence ending (but don't force it if text ends with other punctuation)\n    if (cleaned && !/[.!?]$/.test(cleaned)) {\n        cleaned += \".\";\n    }\n    console.log(\"FINAL CLEANUP - After:\", JSON.stringify(cleaned.slice(-100)));\n    return cleaned;\n}\nfunction validateAndFixSentenceStructure(text) {\n    if (!text) return text;\n    console.log(\"SENTENCE VALIDATION - Before:\", JSON.stringify(text.slice(0, 150)));\n    console.log(\"SENTENCE VALIDATION - Before (end):\", JSON.stringify(text.slice(-150)));\n    let fixed = text.trim();\n    // 1. Remove any leading orphaned words or fragments that don't start a proper sentence\n    // Check if text starts with orphaned words\n    const firstSentenceMatch = fixed.match(/^([^.!?]*?)([A-Z][^.!?]*[.!?])/);\n    if (firstSentenceMatch) {\n        const leadingFragment = firstSentenceMatch[1].trim();\n        if (leadingFragment && leadingFragment.split(/\\s+/).length < 4 && !/^[A-Z]/.test(leadingFragment)) {\n            // If there's a leading fragment that's short and doesn't start with capital, remove it\n            console.log(\"REMOVING LEADING FRAGMENT:\", JSON.stringify(leadingFragment));\n            fixed = fixed.replace(/^[^.!?]*?([A-Z][^.!?]*[.!?])/, \"$1\");\n        }\n    }\n    // 2. Fix basic sentence structure issues\n    const sentences = fixed.split(/(?<=[.!?])\\s+/);\n    const validSentences = [];\n    for(let i = 0; i < sentences.length; i++){\n        const sentence = sentences[i];\n        const trimmed = sentence.trim();\n        if (!trimmed) continue;\n        // Enhanced sentence validation with improved verb detection\n        const wordCount = trimmed.split(/\\s+/).length;\n        const startsWithCapital = /^[A-Z]/.test(trimmed);\n        const endsWithPunctuation = /[.!?]$/.test(trimmed);\n        // Improved verb detection - more comprehensive patterns\n        const hasVerb = /\\b(?:is|are|was|were|will|would|can|could|has|have|had|do|does|did|become|becomes|became|get|gets|got|make|makes|made|take|takes|took|give|gives|gave|show|shows|showed|find|finds|found|think|thinks|thought|know|knows|knew|see|sees|saw|come|comes|came|go|goes|went|work|works|worked|use|uses|used|help|helps|helped|need|needs|needed|want|wants|wanted|try|tries|tried|look|looks|looked|feel|feels|felt|seem|seems|seemed|appear|appears|appeared|include|includes|included|provide|provides|provided|allow|allows|allowed|require|requires|required|create|creates|created|offer|offers|offered|change|changes|changed|move|moves|moved|turn|turns|turned|keep|keeps|kept|hold|holds|held|bring|brings|brought|build|builds|built|run|runs|ran|play|plays|played|live|lives|lived|remain|remains|remained|continue|continues|continued|start|starts|started|stop|stops|stopped|end|ends|ended|begin|begins|began|follow|follows|followed|lead|leads|led|understand|understands|understood|learn|learns|learned|teach|teaches|taught|remember|remembers|remembered|forget|forgets|forgot|decide|decides|decided|choose|chooses|chose|win|wins|won|lose|loses|lost|rising|falling|hanging|blending|casting|formed|erased|buried|told|swept|spread|drifting|floating|pouring|coloring|washed|transforming|providing|tailored|broaden|optimizing|detect|enabling|designed|trained|generate|predicting|lacks|sounding|stands|means|mistakes|hallucinate|understands|predicts|drives|expand|limited|presentations|adaptive|customized|raising|displacement|unfolded|clung|imbuing|assuming|continue|indefinitely|assumed|melody|slice)\\b/i.test(trimmed);\n        // More lenient validation - focus on obvious fragments only\n        const isValidSentence = wordCount >= 3 && startsWithCapital && endsWithPunctuation && (hasVerb || /^(?:Yes|No|Exactly|Indeed|Absolutely|Certainly|Perhaps|Maybe|However|Therefore|Moreover|Furthermore|Additionally|Meanwhile|Nevertheless|Thus|Hence|Consequently|Finally|Initially)\\b/i.test(trimmed) || wordCount >= 8) && // Longer sentences are more likely to be valid even without detected verbs\n        !isLikelyFragment(trimmed) && !isOrphanedWord(trimmed);\n        // Additional check for sentences that don't start properly\n        const hasProperBeginning = /^[A-Z][a-z]/.test(trimmed) || // Starts with capital letter followed by lowercase\n        /^[A-Z][A-Z]+/.test(trimmed.split(\" \")[0]) || // Acronym\n        /^(?:I|A|An|The|This|That|These|Those|He|She|It|We|They|You|My|Your|His|Her|Its|Our|Their|Some|All|Many|Most|Few|Several|Each|Every|Both|Either|Neither|One|Two|Three|Four|Five|First|Second|Third|Last|Next|Previous|Another|Other|Such|Same|Different|New|Old|Good|Bad|Better|Best|Worse|Worst|Big|Small|Large|Little|Long|Short|High|Low|Fast|Slow|Hot|Cold|Warm|Cool|Light|Dark|Bright|Heavy|Easy|Hard|Simple|Complex|Important|Special|General|Specific|Public|Private|National|International|Global|Local|Regional|Common|Rare|Recent|Modern|Ancient|Future|Past|Present|Current|Main|Primary|Secondary|Basic|Advanced|Complete|Partial|Full|Empty|Open|Closed|Free|Busy|Available|Ready|Early|Late|Soon|Never|Always|Often|Sometimes|Usually|Rarely|Seldom|Frequently|Occasionally|Immediately|Quickly|Slowly|Carefully|Clearly|Obviously|Certainly|Probably|Possibly|Maybe|Perhaps|However|Therefore|Thus|Hence|Meanwhile|Moreover|Furthermore|Additionally|Also|Besides|Instead|Otherwise|Nevertheless|Nonetheless|Still|Yet|But|And|Or|So|For|Nor|Because|Since|Although|Though|While|When|Where|What|Who|Which|How|Why|If|Unless|Until|Before|After|During|Between|Among|Above|Below|Over|Under|Through|Across|Around|Beyond|Within|Without|Inside|Outside|Beside|Behind|Ahead|Forward|Backward|Toward|Away|Up|Down|In|On|At|By|To|From|With|Without|Against|About|Around|Near|Far|Here|There|Where|Everywhere|Anywhere|Somewhere|Nowhere|Today|Tomorrow|Yesterday|Now|Then|Later|Earlier|Recently|Finally|Eventually|Initially|Originally|Previously|Afterwards|Subsequently|Consequently|Accordingly|Similarly|Likewise|Conversely|Alternatively|Surprisingly|Fortunately|Unfortunately|Interestingly|Notably|Particularly|Especially|Generally|Specifically|Actually|Really|Truly|Indeed|Certainly|Obviously|Clearly|Apparently|Seemingly|Presumably|Supposedly|Allegedly|Reportedly|Undoubtedly|Definitely|Probably|Possibly|Maybe|Perhaps|Roughly|Approximately|Exactly|Precisely|Nearly|Almost|Barely|Hardly|Scarcely|Quite|Rather|Very|Extremely|Incredibly|Remarkably|Exceptionally|Particularly|Especially|Surprisingly|Amazingly|Absolutely|Completely|Entirely|Fully|Totally|Perfectly|Exactly|Precisely|Strictly|Purely|Simply|Merely|Only|Just|Even|Still|Already|Yet|Again|Once|Twice|Thrice|Never|Always|Forever|Constantly|Continuously|Regularly|Frequently|Often|Sometimes|Occasionally|Rarely|Seldom|Hardly|Never|Already|Still|Yet|Soon|Later|Earlier|Before|After|During|While|Meanwhile|Simultaneously|Concurrently|Immediately|Instantly|Suddenly|Gradually|Slowly|Quickly|Rapidly|Swiftly|Speedily|Fast|Faster|Fastest|Slow|Slower|Slowest)\\b/i.test(trimmed);\n        if (isValidSentence && hasProperBeginning) {\n            validSentences.push(trimmed);\n        } else {\n            console.log(\"REMOVED INVALID SENTENCE:\", JSON.stringify(trimmed), {\n                wordCount,\n                startsWithCapital,\n                endsWithPunctuation,\n                hasVerb,\n                hasProperBeginning\n            });\n        }\n    }\n    // 3. Rejoin valid sentences\n    fixed = validSentences.join(\" \");\n    // 4. Fix sentence beginnings and capitalization\n    fixed = fixSentenceBeginnings(fixed);\n    // 3. Fix common grammatical issues\n    // Remove double spaces\n    fixed = fixed.replace(/\\s+/g, \" \");\n    // Fix spacing around punctuation\n    fixed = fixed.replace(/\\s+([.!?])/g, \"$1\");\n    fixed = fixed.replace(/([.!?])\\s*([A-Z])/g, \"$1 $2\");\n    // Remove orphaned punctuation\n    fixed = fixed.replace(/\\s+[.!?]\\s*$/g, \"\");\n    // Ensure proper sentence ending\n    if (fixed && !/[.!?]$/.test(fixed)) {\n        fixed += \".\";\n    }\n    console.log(\"SENTENCE VALIDATION - After:\", JSON.stringify(fixed.slice(-150)));\n    return fixed.trim();\n}\nfunction isLikelyFragment(text) {\n    // Check if text looks like a word fragment or incomplete thought\n    const trimmed = text.trim();\n    // Very short fragments\n    if (trimmed.length < 3) return true;\n    // Just punctuation\n    if (/^[^\\w]*$/.test(trimmed)) return true;\n    // Just a single word with punctuation\n    if (/^\\w+[.!?]*$/.test(trimmed)) return true;\n    // Looks like trailing word list fragments\n    if (/^(?:especially|clearly|confidently|factually|frequently)(?:\\s*,\\s*(?:especially|clearly|confidently|factually|frequently))*[.!?]*$/i.test(trimmed)) return true;\n    return false;\n}\nfunction isOrphanedWord(text) {\n    // Check if text is just orphaned words that don't form a complete sentence\n    const trimmed = text.trim();\n    // Single word followed by punctuation\n    if (/^\\w+[.!?]?$/.test(trimmed)) return true;\n    // Two words that don't form a meaningful start\n    const words = trimmed.split(/\\s+/);\n    if (words.length === 2) {\n        const [first, second] = words;\n        // Check if it's not a proper sentence beginning\n        if (!/^(?:I|You|He|She|It|We|They|The|This|That|These|Those|A|An|My|Your|His|Her|Its|Our|Their|Some|All|Many|Most|Few)\\b/i.test(first)) {\n            return true;\n        }\n    }\n    // Check for random word combinations that don't make sense at sentence start\n    const firstWord = words[0]?.toLowerCase();\n    const secondWord = words[1]?.toLowerCase();\n    // Common orphaned patterns\n    const orphanedPatterns = [\n        // Prepositions at start without proper context\n        /^(?:of|in|on|at|by|for|with|from|to|into|onto|upon|under|over|through|across|around|between|among|during|before|after|above|below|beside|behind|beyond|within|without)\\s/i,\n        // Conjunctions at start (unless starting dependent clause)\n        /^(?:and|but|or|nor|yet|so)\\s/i,\n        // Articles alone or with single modifier\n        /^(?:a|an|the)\\s+\\w+[.!?]?$/i\n    ];\n    return orphanedPatterns.some((pattern)=>pattern.test(trimmed));\n}\nfunction fixSentenceBeginnings(text) {\n    if (!text) return text;\n    // Split into sentences and fix each one\n    const sentences = text.split(/(?<=[.!?])\\s+/);\n    const fixedSentences = sentences.map((sentence)=>{\n        let fixed = sentence.trim();\n        if (!fixed) return fixed;\n        // Ensure first character is capitalized\n        fixed = fixed.charAt(0).toUpperCase() + fixed.slice(1);\n        // Fix common sentence beginning issues\n        // Remove redundant \"the the\" or similar repetitions at start\n        fixed = fixed.replace(/^(The|A|An|This|That|These|Those)\\s+\\1\\s+/i, \"$1 \");\n        // Fix sentences starting with lowercase conjunctions that should be capitalized\n        fixed = fixed.replace(/^(and|but|or|so|yet|for)\\s+/i, (match, conj)=>{\n            return conj.charAt(0).toUpperCase() + conj.slice(1).toLowerCase() + \" \";\n        });\n        return fixed;\n    });\n    return fixedSentences.join(\" \");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/paraphrase/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/paraphrase.ts":
/*!*******************************!*\
  !*** ./src/lib/paraphrase.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeHumanization: () => (/* binding */ analyzeHumanization),\n/* harmony export */   analyzeSampleStyle: () => (/* binding */ analyzeSampleStyle),\n/* harmony export */   finalizeOutput: () => (/* binding */ finalizeOutput),\n/* harmony export */   humanizeText: () => (/* binding */ humanizeText),\n/* harmony export */   paraphraseWithProfile: () => (/* binding */ paraphraseWithProfile),\n/* harmony export */   verifyAndFinalize: () => (/* binding */ verifyAndFinalize)\n/* harmony export */ });\n/* harmony import */ var _styleFrequency_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styleFrequency.ts */ \"(rsc)/./src/lib/styleFrequency.ts\");\n/* harmony import */ var _styleRules_ts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./styleRules.ts */ \"(rsc)/./src/lib/styleRules.ts\");\n\n\n// Simple synonym map (demo only)\nconst SYNONYMS = {\n    important: [\n        \"crucial\",\n        \"vital\",\n        \"key\"\n    ],\n    fast: [\n        \"swift\",\n        \"quick\",\n        \"rapid\"\n    ],\n    slow: [\n        \"unhurried\",\n        \"gradual\",\n        \"leisurely\"\n    ],\n    improve: [\n        \"enhance\",\n        \"refine\",\n        \"strengthen\"\n    ],\n    clear: [\n        \"lucid\",\n        \"plain\",\n        \"transparent\"\n    ],\n    many: [\n        \"numerous\",\n        \"several\",\n        \"countless\"\n    ],\n    big: [\n        \"large\",\n        \"substantial\",\n        \"significant\"\n    ],\n    small: [\n        \"modest\",\n        \"minor\",\n        \"compact\"\n    ],\n    help: [\n        \"assist\",\n        \"support\",\n        \"aid\"\n    ],\n    show: [\n        \"demonstrate\",\n        \"display\",\n        \"illustrate\"\n    ],\n    use: [\n        \"utilize\",\n        \"employ\",\n        \"apply\"\n    ],\n    quick: [\n        \"swift\",\n        \"rapid\",\n        \"brisk\"\n    ],\n    good: [\n        \"solid\",\n        \"sound\",\n        \"strong\"\n    ],\n    bad: [\n        \"poor\",\n        \"weak\",\n        \"subpar\"\n    ],\n    need: [\n        \"require\",\n        \"necessitate\"\n    ],\n    ensure: [\n        \"guarantee\",\n        \"secure\"\n    ],\n    allow: [\n        \"enable\",\n        \"permit\"\n    ],\n    get: [\n        \"obtain\",\n        \"secure\",\n        \"gain\"\n    ],\n    create: [\n        \"build\",\n        \"craft\",\n        \"produce\"\n    ],\n    increase: [\n        \"boost\",\n        \"raise\",\n        \"expand\"\n    ],\n    make: [\n        \"produce\",\n        \"craft\",\n        \"form\"\n    ],\n    provide: [\n        \"offer\",\n        \"supply\",\n        \"deliver\"\n    ],\n    keep: [\n        \"retain\",\n        \"maintain\",\n        \"preserve\"\n    ],\n    reduce: [\n        \"cut\",\n        \"lower\",\n        \"decrease\"\n    ],\n    lazy: [\n        \"idle\",\n        \"sluggish\"\n    ],\n    jumps: [\n        \"leaps\",\n        \"bounds\"\n    ]\n};\nfunction paraphraseWithProfile(text, profile, options = {}) {\n    if (!text.trim()) return \"\";\n    // Build frequency map from user sample (once) to bias synonym choices toward familiar vocabulary.\n    const freqMap = profile?.sampleExcerpt ? (0,_styleFrequency_ts__WEBPACK_IMPORTED_MODULE_0__.buildFrequencyMap)(profile.sampleExcerpt) : {};\n    const sampleStyle = profile?.sampleExcerpt ? analyzeSampleStyle(profile.sampleExcerpt) : null;\n    // Basic sentence split\n    const sentences = text.split(/(?<=[.!?])\\s+/);\n    const adjusted = sentences.map((s)=>rewriteSentence(s, profile, freqMap, sampleStyle));\n    let result = adjusted.join(\" \");\n    if (profile) {\n        // Adjust descriptiveness by optionally adding/removing adjectives (very naive)\n        if (profile.descriptiveness > 0.7) {\n            result = result.replace(/\\b(idea|concept|plan)\\b/gi, (m)=>\"distinct \" + m);\n        } else if (profile.descriptiveness < 0.3) {\n            result = result.replace(/\\b(distinct|vivid|rich)\\s+(idea|concept|plan)\\b/gi, \"$2\");\n        }\n        // Directness: shorten or slightly expand sentences\n        if (profile.directness > 0.7) {\n            result = result.replace(/\\b(in order to)\\b/gi, \"to\");\n            result = result.replace(/\\b(it is|there is|there are)\\b/gi, \"\");\n        } else if (profile.directness < 0.3) {\n            result = result.replace(/\\b(to)\\b/gi, \"in order to\");\n        }\n        // Lexicon injection (ensure words appear at least once) - only if enabled\n        if (profile.customLexicon?.length && options.includeLexiconNotes !== false) {\n            const missing = profile.customLexicon.filter((w)=>!new RegExp(`\\\\b${escapeReg(w)}\\\\b`, \"i\").test(result));\n            if (missing.length) {\n                result += \"\\n\\nLexicon notes: \" + missing.slice(0, 5).join(\", \");\n            }\n        }\n    }\n    // Pre-contraction enforcement if sample prefers them\n    if (sampleStyle?.usesContractions) {\n        // Apply contraction transforms across multiple common patterns\n        const CONTR_MAP = [\n            [\n                /\\b[Ii]t is\\b/g,\n                \"it's\"\n            ],\n            [\n                /\\b[Dd]o not\\b/g,\n                \"don't\"\n            ],\n            [\n                /\\b[Cc]annot\\b/g,\n                \"can't\"\n            ],\n            [\n                /\\b[Tt]hat is\\b/g,\n                \"that's\"\n            ],\n            [\n                /\\b[Tt]here is\\b/g,\n                \"there's\"\n            ],\n            [\n                /\\b[Yy]ou are\\b/g,\n                \"you're\"\n            ],\n            [\n                /\\bW[eE] are\\b/g,\n                \"we're\"\n            ],\n            [\n                /\\b[Ii] am\\b/g,\n                \"I'm\"\n            ]\n        ];\n        CONTR_MAP.forEach(([r, rep])=>{\n            result = result.replace(r, rep);\n        });\n        // Guarantee at least one contraction if sample used them and text had eligible patterns\n        if (!/\\b(?:it's|don't|can't|that's|there's|you're|we're|I'm)\\b/i.test(result)) {\n            result = result.replace(/\\bIt is\\b/, \"It's\");\n        }\n    }\n    result = humanizeText(result, {\n        allowContractions: sampleStyle ? sampleStyle.usesContractions : true,\n        preferredTransitions: sampleStyle?.preferredTransitions || []\n    });\n    // High-directness aggressive simplification (pre-empt flowery phrasing)\n    if (profile?.directness && profile.directness > 0.9) {\n        result = aggressiveDirectSimplify(result);\n    }\n    // If effectively unchanged, apply a fallback diversification pass\n    if (roughlyEqual(text, result)) {\n        result = fallbackDiversify(text, profile, freqMap);\n    }\n    // Enforce minimum lexical change ratio for high directness/pacing: if too similar, force variation\n    if (profile?.directness && profile.directness > 0.9) {\n        const ratio = lexicalChangeRatio(text, result);\n        if (ratio < 0.22) {\n            result = forceVariation(result, 0.25);\n        }\n    }\n    // If sample style has target sentence length significantly different, lightly adjust (post-pass)\n    if (sampleStyle && sampleStyle.avgSentenceLength) {\n        const target = sampleStyle.avgSentenceLength;\n        // If our output sentences are much longer than sample, try splitting on commas.\n        if (target < 90) {\n            result = result.replace(/([^.!?]{140,}?),(\\s+)/g, (m, clause, sp)=>clause + \". \");\n        } else if (target > 130) {\n            // Sample prefers longer sentences: occasionally merge adjacent short ones.\n            const parts = result.split(/(?<=[.!?])\\s+/);\n            for(let i = 0; i < parts.length - 1; i++){\n                if (parts[i].length < 60 && parts[i + 1].length < 60 && Math.random() < 0.4) {\n                    parts[i] = parts[i].replace(/[.!?]$/, \"\") + \", \" + parts[i + 1].charAt(0).toLowerCase() + parts[i + 1].slice(1);\n                    parts.splice(i + 1, 1);\n                    i--;\n                }\n            }\n            result = parts.join(\" \");\n        }\n    }\n    return result.trim();\n}\nfunction rewriteSentence(sentence, profile, freqMap = {}, sampleStyle = null) {\n    let s = sentence;\n    // Replace synonyms respecting formality (simple heuristic: higher formality -> pick later synonym)\n    s = s.replace(/\\b([a-zA-Z]+)\\b/g, (match)=>{\n        const key = match.toLowerCase();\n        const syns = SYNONYMS[key];\n        if (!syns) return match;\n        // Slight stochastic choice for variety; bias by formality when profile present.\n        if (!profile) {\n            // Try frequency preference even without profile style sliders if sample available\n            const preferred = (0,_styleFrequency_ts__WEBPACK_IMPORTED_MODULE_0__.pickPreferred)(syns, freqMap) || pickSyn(syns);\n            return preserveCase(match, preferred);\n        }\n        const bias = Math.min(syns.length - 1, Math.floor(profile.formality * syns.length));\n        let candidatePool = [\n            ...syns\n        ];\n        // If frequency preference hits, elevate it.\n        const preferred = (0,_styleFrequency_ts__WEBPACK_IMPORTED_MODULE_0__.pickPreferred)(syns, freqMap);\n        if (preferred) {\n            candidatePool = [\n                preferred,\n                ...syns.filter((sy)=>sy !== preferred)\n            ];\n        }\n        // If sample style has high frequency simple word present among synonyms, prefer it.\n        if (sampleStyle && sampleStyle.highFrequencyWords.length) {\n            const samplePreferred = candidatePool.find((c)=>sampleStyle.highFrequencyWords.includes(c.toLowerCase()));\n            if (samplePreferred) {\n                candidatePool = [\n                    samplePreferred,\n                    ...candidatePool.filter((c)=>c !== samplePreferred)\n                ];\n            }\n        }\n        const chosen = Math.random() < 0.55 ? candidatePool[0] : candidatePool[Math.floor(Math.random() * candidatePool.length)];\n        return preserveCase(match, chosen);\n    });\n    // Pacing: shorter sentences for higher pacing, else expand slightly\n    if (profile) {\n        if (profile.pacing > 0.7 && s.length > 120) {\n            s = s.replace(/,\\s+which/gi, \". Which\");\n        } else if (profile.pacing < 0.3 && s.length < 80) {\n            s = s.replace(/\\.$/, \", which in turn\");\n        }\n    }\n    // Inject sample style preferred transitions at start occasionally\n    if (sampleStyle && sampleStyle.preferredTransitions.length && !/^\\s*(However|Moreover|Additionally|Still|Instead|Meanwhile)/i.test(s)) {\n        if (Math.random() < 0.18) {\n            const t = sampleStyle.preferredTransitions[Math.floor(Math.random() * sampleStyle.preferredTransitions.length)];\n            s = t + \" \" + s.charAt(0).toLowerCase() + s.slice(1);\n        }\n    }\n    return s;\n}\nfunction preserveCase(original, replacement) {\n    if (original === original.toUpperCase()) return replacement.toUpperCase();\n    if (original[0] === original[0].toUpperCase()) return replacement.charAt(0).toUpperCase() + replacement.slice(1);\n    return replacement;\n}\nfunction capitalizeIf(original, word) {\n    if (original[0] === original[0].toUpperCase()) return word.charAt(0).toUpperCase() + word.slice(1);\n    return word;\n}\nfunction escapeReg(s) {\n    return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction pickSyn(list) {\n    return list[Math.floor(Math.random() * list.length)];\n}\nfunction roughlyEqual(a, b) {\n    const na = a.replace(/\\s+/g, \" \").trim().toLowerCase();\n    const nb = b.replace(/\\s+/g, \" \").trim().toLowerCase();\n    return na === nb;\n}\nfunction fallbackDiversify(text, profile, freqMap = {}) {\n    // Force a few lexical substitutions on content words not already in synonym map by injecting mild adjectives or splitting sentences.\n    let t = text;\n    // Split long sentences (> 24 words) in half.\n    t = t.replace(/([^.!?]{120,}?)([,:;])\\s+/g, (m, clause, sep)=>clause + \". \");\n    // Replace some conjunction patterns to vary rhythm.\n    t = t.replace(/\\band\\s+then\\b/gi, \"then\");\n    t = t.replace(/\\bbut\\b/gi, \"yet\");\n    // Inject a light adverb after first verb if none changed.\n    const words = t.split(/(\\s+)/);\n    let injected = false;\n    for(let i = 0; i < words.length; i++){\n        if (/^[a-zA-Z]{6,}$/.test(words[i]) && !injected) {\n            const wLower = words[i].toLowerCase();\n            if (SYNONYMS[wLower]) {\n                words[i] = preserveCase(words[i], SYNONYMS[wLower][0]);\n                injected = true;\n            }\n        }\n    }\n    if (!injected) {\n        // Add a concise qualifier to first noun-like token\n        for(let i = 0; i < words.length; i++){\n            if (/^[A-Za-z]{5,}$/.test(words[i])) {\n                words[i] = \"notably \" + words[i];\n                break;\n            }\n        }\n    }\n    t = words.join(\"\");\n    if (profile?.customLexicon?.length) {\n        const firstMissing = profile.customLexicon.find((w)=>!new RegExp(`\\\\b${escapeReg(w)}\\\\b`, \"i\").test(t));\n        if (firstMissing) t += (t.endsWith(\".\") ? \"\" : \".\") + \" \" + firstMissing + \".\";\n    }\n    return t;\n}\n// Compute proportion of tokens changed (case-insensitive exact match comparison)\nfunction lexicalChangeRatio(original, updated) {\n    const oTokens = original.split(/\\b/).filter((t)=>/[A-Za-z]/.test(t));\n    const uTokens = updated.split(/\\b/).filter((t)=>/[A-Za-z]/.test(t));\n    if (!oTokens.length || !uTokens.length) return 0;\n    const minLen = Math.min(oTokens.length, uTokens.length);\n    let changed = 0;\n    for(let i = 0; i < minLen; i++){\n        if (oTokens[i].toLowerCase() !== uTokens[i].toLowerCase()) changed++;\n    }\n    // Penalize identical trailing structure\n    return changed / minLen;\n}\n// Force additional lexical variation by replacing a fraction of content words with synonyms / simplifications.\nfunction forceVariation(text, targetExtraRatio) {\n    const words = text.split(/(\\s+)/);\n    const CONTENT = /[A-Za-z]{5,}/;\n    const replBank = {\n        shimmering: [\n            \"bright\",\n            \"gleaming\",\n            \"clear\"\n        ],\n        radiant: [\n            \"bright\",\n            \"vivid\"\n        ],\n        expanse: [\n            \"area\",\n            \"domain\"\n        ],\n        epoch: [\n            \"era\",\n            \"period\"\n        ],\n        intertwines: [\n            \"links\",\n            \"connects\",\n            \"blends\"\n        ],\n        seamlessly: [\n            \"smoothly\",\n            \"directly\"\n        ],\n        symphony: [\n            \"system\",\n            \"blend\"\n        ],\n        optimized: [\n            \"efficient\",\n            \"streamlined\"\n        ],\n        existence: [\n            \"life\"\n        ],\n        luminous: [\n            \"bright\"\n        ],\n        corridors: [\n            \"paths\",\n            \"channels\"\n        ],\n        resonance: [\n            \"flow\",\n            \"signal\"\n        ],\n        quantified: [\n            \"scored\",\n            \"measured\"\n        ],\n        archived: [\n            \"stored\"\n        ],\n        refined: [\n            \"improved\",\n            \"honed\"\n        ],\n        predictive: [\n            \"forecast\"\n        ],\n        precision: [\n            \"accuracy\"\n        ],\n        malleable: [\n            \"flexible\"\n        ],\n        construct: [\n            \"form\"\n        ],\n        streams: [\n            \"flows\"\n        ],\n        continuum: [\n            \"blend\",\n            \"span\"\n        ],\n        converge: [\n            \"merge\",\n            \"blend\"\n        ],\n        limitations: [\n            \"limits\"\n        ],\n        horizon: [\n            \"future edge\",\n            \"outlook\"\n        ],\n        progress: [\n            \"advance\",\n            \"growth\"\n        ]\n    };\n    let applied = 0;\n    const target = Math.ceil(words.length * targetExtraRatio);\n    for(let i = 0; i < words.length && applied < target; i++){\n        const w = words[i];\n        if (!CONTENT.test(w)) continue;\n        const key = w.toLowerCase();\n        const cand = replBank[key];\n        if (cand) {\n            const replacement = cand[Math.floor(Math.random() * cand.length)];\n            words[i] = preserveCase(w, replacement);\n            applied++;\n        }\n    }\n    return words.join(\"\");\n}\n// Aggressive direct simplification of ornate metaphoric phrases (idempotent-ish).\nfunction aggressiveDirectSimplify(t) {\n    const PHRASES = [\n        [\n            /Amid the radiant expanse of a hyper-connected epoch/gi,\n            \"In a highly connected era\"\n        ],\n        [\n            /human imagination intertwines seamlessly with machine intelligence/gi,\n            \"human ideas link with machine intelligence\"\n        ],\n        [\n            /symphony of optimized existence/gi,\n            \"more efficient daily life\"\n        ],\n        [\n            /luminous corridors of digital resonance/gi,\n            \"bright digital channels\"\n        ],\n        [\n            /emotion is quantified,? memory is archived,? and creativity is algorithmically refined/gi,\n            \"emotion is measured, memory stored, and creativity tuned by algorithms\"\n        ],\n        [\n            /the world hums with predictive precision/gi,\n            \"systems run on early predictions\"\n        ],\n        [\n            /cities glow with algorithmic rhythms/gi,\n            \"cities run on automated cycles\"\n        ],\n        [\n            /identity itself becomes a malleable construct sculpted by streams of data/gi,\n            \"identity turns flexible and shaped by data\"\n        ],\n        [\n            /in this shimmering continuum/gi,\n            \"in this blended layer\"\n        ],\n        [\n            /reality and simulation converge/gi,\n            \"reality and simulation merge\"\n        ],\n        [\n            /dissolving the limitations of time and space/gi,\n            \"reducing time and distance limits\"\n        ],\n        [\n            /boundless horizon of progress shimmering in eternal algorithmic dawn/gi,\n            \"open-ended incremental innovation\"\n        ]\n    ];\n    PHRASES.forEach(([rx, rep])=>{\n        t = t.replace(rx, rep);\n    });\n    // Remove double adjectives (radiant expanse -> expanse, unless expanse replaced earlier)\n    t = t.replace(/\\b(radiant|shimmering|luminous)\\s+(expanse|horizon|network)\\b/gi, \"$2\");\n    // Collapse multiple spaces\n    return t.replace(/\\s{2,}/g, \" \");\n}\n// Humanization post-process: add gentle variability, contractions, avoid overly AI formality.\nfunction humanizeText(text, opts = {}) {\n    let t = text;\n    // Normalize spacing and fix multiple spaces\n    t = t.replace(/ +/g, \" \");\n    // Remove repetitive word patterns (words repeated 2+ times in a row)\n    t = t.replace(/\\b(\\w+)(\\s+\\1){2,}\\b/gi, \"$1\");\n    // Remove repetitive phrase patterns (simple detection)\n    t = t.replace(/\\b(.{10,30}?)\\s+\\1\\b/gi, \"$1\");\n    // Contractions (simple set)\n    if (opts.allowContractions !== false) {\n        const CONTRACTIONS = [\n            [\n                /\\b[Dd]o not\\b/g,\n                \"don't\"\n            ],\n            [\n                /\\b[Ii]t is\\b/g,\n                \"it's\"\n            ],\n            [\n                /\\b[Cc]annot\\b/g,\n                \"can't\"\n            ],\n            [\n                /\\b[Tt]hat is\\b/g,\n                \"that's\"\n            ],\n            [\n                /\\b[Tt]here is\\b/g,\n                \"there's\"\n            ],\n            [\n                /\\b[Yy]ou are\\b/g,\n                \"you're\"\n            ],\n            [\n                /\\bW[eE] are\\b/g,\n                \"we're\"\n            ],\n            [\n                /\\b[Ii] am\\b/g,\n                \"I'm\"\n            ]\n        ];\n        CONTRACTIONS.forEach(([r, rep])=>{\n            t = t.replace(r, rep);\n        });\n    } else {\n        // If contractions disallowed, expand any that slipped in\n        const EXPAND = [\n            [\n                /\\bit's\\b/gi,\n                \"it is\"\n            ],\n            [\n                /\\bcan't\\b/gi,\n                \"cannot\"\n            ],\n            [\n                /\\bthat's\\b/gi,\n                \"that is\"\n            ],\n            [\n                /\\bthere's\\b/gi,\n                \"there is\"\n            ],\n            [\n                /\\byou're\\b/gi,\n                \"you are\"\n            ],\n            [\n                /\\bwe're\\b/gi,\n                \"we are\"\n            ],\n            [\n                /\\bI'm\\b/g,\n                \"I am\"\n            ],\n            [\n                /\\bdon't\\b/gi,\n                \"do not\"\n            ]\n        ];\n        EXPAND.forEach(([r, rep])=>{\n            t = t.replace(r, rep);\n        });\n    }\n    // Slight sentence length variation: occasionally merge very short sentences.\n    const parts = t.split(/(?<=[.!?])\\s+/);\n    for(let i = 0; i < parts.length - 1; i++){\n        if (parts[i].length < 25 && parts[i + 1].length < 40 && Math.random() < 0.3) {\n            parts[i] = parts[i].replace(/[.!?]$/, \"\") + \", \" + parts[i + 1].charAt(0).toLowerCase() + parts[i + 1].slice(1);\n            parts.splice(i + 1, 1);\n            i--;\n        }\n    }\n    t = parts.join(\" \");\n    // Avoid AI style openings\n    t = t.replace(/^Here(?:'|)s a(?:n)? /i, \"\").replace(/^This is a /i, \"\");\n    t = t.replace(/^(?:Certainly|Of course)[,!]?\\s*/i, \"\");\n    // Remove lingering meta phrasing\n    t = t.replace(/I (?:have|have just|will) (?:maintained|kept|preserved|ensured) .*?$/i, \"\").trim();\n    t = t.replace(/(?:This|The above) (?:maintains|preserves|ensures) .*?$/i, \"\").trim();\n    // Fix trailing incomplete sentences\n    const sentences = t.split(/(?<=[.!?])\\s+/);\n    if (sentences.length > 1) {\n        const lastSentence = sentences[sentences.length - 1];\n        // If last sentence is incomplete and short, remove it\n        if (!/[.!?]$/.test(lastSentence.trim()) && lastSentence.trim().length < 15) {\n            sentences.pop();\n            t = sentences.join(\" \");\n        }\n    }\n    return t.trim();\n}\n// Final verification + styling pass to ensure output is humanized and style aspects considered.\nfunction finalizeOutput(raw, profile, options = {}) {\n    let out = (raw || \"\").trim();\n    if (!out) return \"\";\n    // Remove unwanted prefaces.\n    out = out.replace(/^Here(?:'|)s (?:the )?(?:rewritten|paraphrased) text:?\\s*/i, \"\").replace(/^Paraphrased (?:version|text)[:\\-]?\\s*/i, \"\");\n    // Aggressive simplification of ornate metaphors for very direct styles before other passes.\n    if (profile?.directness && profile.directness > 0.9) {\n        out = simplifyFlowery(out);\n    }\n    const sampleStyle = profile?.sampleExcerpt ? analyzeSampleStyle(profile.sampleExcerpt) : null;\n    out = humanizeText(out, {\n        allowContractions: sampleStyle ? sampleStyle.usesContractions : true,\n        preferredTransitions: sampleStyle?.preferredTransitions || []\n    });\n    if (sampleStyle) {\n        // Use original raw text context not available here; adapt relative to current only.\n        out = adaptToSampleStyle(out, out, sampleStyle);\n    }\n    if (profile) {\n        if (profile.directness > 0.75) out = out.replace(/\\b(in order to)\\b/gi, \"to\");\n        if (profile.directness < 0.25) {\n            let replaced = 0;\n            out = out.replace(/\\bto\\b/g, (m)=>replaced++ < 2 ? \"in order to\" : m);\n        }\n        // Only add lexicon notes if explicitly enabled (default: true for backward compatibility)\n        if (profile.customLexicon?.length && options.includeLexiconNotes !== false) {\n            console.log(\"Adding lexicon notes because includeLexiconNotes:\", options.includeLexiconNotes);\n            const missing = profile.customLexicon.filter((w)=>!new RegExp(`\\b${escapeReg(w)}\\b`, \"i\").test(out));\n            if (missing.length && !/Lexicon notes:/i.test(out)) {\n                out += `\\n\\nLexicon notes: ${missing.slice(0, 5).join(\", \")}`;\n            }\n        } else {\n            console.log(\"NOT adding lexicon notes because includeLexiconNotes:\", options.includeLexiconNotes);\n        }\n    }\n    const enforced = (0,_styleRules_ts__WEBPACK_IMPORTED_MODULE_1__.enforceStyleRulesWithActions)(out);\n    out = enforced.text.replace(/\\s+$/, \"\");\n    // Repair accidental fragment splits: lowercase after a period likely a false split → join.\n    out = out.replace(/([a-z])\\.\\s+([a-z])/g, \"$1 $2\");\n    // Collapse stray multi-period artifacts.\n    out = out.replace(/\\.(\\s*\\.)+/g, \".\");\n    // Secondary punctuation normalization\n    out = out.replace(/,\\s*\\./g, \".\").replace(/\\.(\\s*,)+/g, \".\");\n    out = out.replace(/\\bof of\\b/gi, \"of\");\n    out = out.replace(/\\s+'s\\b/g, \"'s\");\n    out = fixSpellingArtifacts(out);\n    out = validateAndRepair(out, profile);\n    return {\n        text: out,\n        actions: enforced.actions\n    };\n}\n// Simplify figurative / ornate phrases into concise, direct equivalents.\nfunction simplifyFlowery(t) {\n    const replacements = [\n        [\n            /shimmering architecture of tomorrow['’]s digital frontier/gi,\n            \"future digital infrastructure\"\n        ],\n        [\n            /shimmering architecture/gi,\n            \"digital structure\"\n        ],\n        [\n            /endless streams of data/gi,\n            \"continuous data streams\"\n        ],\n        [\n            /vast (and )?luminous network of shared cognition/gi,\n            \"large shared network\"\n        ],\n        [\n            /cities evolve into breathing organisms/gi,\n            \"cities operate as adaptive systems\"\n        ],\n        [\n            /quantum currents (and|&) algorithmic symphonies/gi,\n            \"high‑speed compute pipelines\"\n        ],\n        [\n            /even silence is calculated,? archived,? and optimized/gi,\n            \"everything is tracked and tuned\"\n        ],\n        [\n            /time itself becomes elastic/gi,\n            \"time feels compressed\"\n        ],\n        [\n            /bending gracefully to the will of predictive engines that anticipate desire before it arises/gi,\n            \"driven by systems that predict needs early\"\n        ],\n        [\n            /individuality dissolves into the elegant geometry of collective progress/gi,\n            \"individual signals fold into shared progress\"\n        ],\n        [\n            /the distinction between thought and technology fades/gi,\n            \"human intent and tool execution blur\"\n        ],\n        [\n            /harmonious rhythm of perpetual innovation/gi,\n            \"constant incremental innovation\"\n        ]\n    ];\n    replacements.forEach(([rx, rep])=>{\n        t = t.replace(rx, rep);\n    });\n    // Remove stacked ornate adjectives (keep last core noun phrase)\n    t = t.replace(/\\b([A-Za-z]+,\\s+){1,3}([A-Za-z]+) (network|system|architecture|progress)\\b/g, \"$2 $3\");\n    return t.replace(/\\s{2,}/g, \" \");\n}\nconst AI_PHRASES = [\n    \"in conclusion\",\n    \"this article\",\n    \"the following\",\n    \"as an ai\",\n    \"here is\",\n    \"here are\",\n    \"in this section\",\n    \"overall,\"\n];\nfunction analyzeHumanization(text, profile) {\n    const sentences = text.split(/(?<=[.!?])\\s+/).filter((s)=>s.trim().length);\n    const sentenceLengths = sentences.map((s)=>s.length);\n    const avg = sentenceLengths.reduce((a, b)=>a + b, 0) / (sentenceLengths.length || 1);\n    const variance = sentenceLengths.reduce((a, b)=>a + Math.pow(b - avg, 2), 0) / (sentenceLengths.length || 1);\n    const std = Math.sqrt(variance);\n    const words = text.toLowerCase().match(/\\b[\\w']+\\b/g) || [];\n    const unique = new Set(words);\n    const uniqueRatio = words.length ? unique.size / words.length : 0;\n    const hits = AI_PHRASES.filter((p)=>new RegExp(`\\\\b${escapeReg(p)}\\\\b`, \"i\").test(text));\n    // Custom lexicon presence count\n    let lexCount = 0;\n    if (profile?.customLexicon?.length) {\n        for (const w of profile.customLexicon){\n            if (new RegExp(`\\\\b${escapeReg(w)}\\\\b`, \"i\").test(text)) lexCount++;\n        }\n    }\n    // Repeated sentence starts\n    const startsFreq = {};\n    for (const s of sentences){\n        const m = s.trim().match(/^([A-Za-z']+)/);\n        if (m) {\n            const k = m[1].toLowerCase();\n            startsFreq[k] = (startsFreq[k] || 0) + 1;\n        }\n    }\n    const maxStart = Object.values(startsFreq).reduce((a, b)=>Math.max(a, b), 0);\n    const repeatedStartsRatio = sentences.length ? maxStart / sentences.length : 0;\n    const isHumanized = avg >= 40 && avg <= 260 && // not too uniform extremes\n    std >= 15 && // some variance\n    uniqueRatio > 0.35 && hits.length === 0 && repeatedStartsRatio < 0.5 && (!profile?.customLexicon?.length || lexCount > 0);\n    return {\n        sentenceCount: sentences.length,\n        avgSentenceLength: avg,\n        sentenceLengthStd: std,\n        uniqueTokenRatio: uniqueRatio,\n        aiPhraseHits: hits,\n        customLexiconPresent: lexCount,\n        repeatedStartsRatio,\n        isHumanized,\n        passes: 0\n    };\n}\nfunction verifyAndFinalize(raw, profile, maxPasses = 2, options = {}) {\n    let currentResult = finalizeOutput(raw, profile, options);\n    let current = typeof currentResult === \"string\" ? currentResult : currentResult.text;\n    let metrics = analyzeHumanization(current, profile);\n    let passes = 0;\n    while(!metrics.isHumanized && passes < maxPasses){\n        passes++;\n        current = adjustmentPass(current, profile, passes);\n        const re = finalizeOutput(current, profile, options);\n        current = typeof re === \"string\" ? re : re.text; // re-apply cleanup\n        metrics = analyzeHumanization(current, profile);\n        metrics.passes = passes;\n    }\n    metrics.passes = passes;\n    return {\n        output: current,\n        metrics\n    };\n}\nfunction adjustmentPass(text, profile, pass) {\n    let t = text;\n    // If sentence variance low, attempt merges or splits.\n    const sentences = t.split(/(?<=[.!?])\\s+/).filter(Boolean);\n    if (sentences.length > 2) {\n        // Merge two shortest\n        const sortedIdx = sentences.map((s, i)=>({\n                s,\n                i\n            })).sort((a, b)=>a.s.length - b.s.length).slice(0, 2).map((o)=>o.i).sort((a, b)=>b - a);\n        if (sortedIdx.length === 2 && Math.random() < 0.6) {\n            const a = sentences[sortedIdx[1]].replace(/[.!?]$/, \"\");\n            sentences[sortedIdx[1]] = a + \", \" + sentences[sortedIdx[0]].charAt(0).toLowerCase() + sentences[sortedIdx[0]].slice(1);\n            sentences.splice(sortedIdx[0], 1);\n            t = sentences.join(\" \");\n        }\n    }\n    // Remove AI phrases if any\n    for (const phrase of AI_PHRASES){\n        const re = new RegExp(`\\\\b${escapeReg(phrase)}\\\\b`, \"ig\");\n        t = t.replace(re, \"\");\n    }\n    // If lexicon missing, inject subtle parenthetical rather than notes if not already there.\n    if (profile?.customLexicon?.length) {\n        const firstMissing = profile.customLexicon.find((w)=>!new RegExp(`\\\\b${escapeReg(w)}\\\\b`, \"i\").test(t));\n        if (firstMissing && !/Lexicon notes:/i.test(t)) {\n            t += (t.endsWith(\".\") ? \"\" : \".\") + \" (\" + firstMissing + \")\";\n        }\n    }\n    // Vary starts if repeated\n    const starts = t.split(/(?<=[.!?])\\s+/).map((s)=>s.trim()).filter(Boolean);\n    const startWords = starts.map((s)=>(s.match(/^([A-Za-z']+)/)?.[1] || \"\").toLowerCase());\n    const freq = {};\n    startWords.forEach((w)=>{\n        if (w) freq[w] = (freq[w] || 0) + 1;\n    });\n    const maxFreqWord = Object.entries(freq).sort((a, b)=>b[1] - a[1])[0]?.[0];\n    if (maxFreqWord) {\n        for(let i = 1; i < starts.length; i++){\n            if (starts[i].toLowerCase().startsWith(maxFreqWord) && Math.random() < 0.5) {\n                starts[i] = varySentenceStart(starts[i]);\n            }\n        }\n        t = starts.join(\" \");\n    }\n    return t;\n}\nfunction varySentenceStart(s) {\n    const transitions = [\n        \"However,\",\n        \"Moreover,\",\n        \"Additionally,\",\n        \"Still,\",\n        \"Instead,\",\n        \"Meanwhile,\"\n    ];\n    const firstWord = s.match(/^([A-Za-z']+)/)?.[1] || \"\";\n    if (!firstWord) return s;\n    if (new RegExp(`^(${transitions.join(\"|\")})`, \"i\").test(s)) return s; // already varied\n    if (Math.random() < 0.6) {\n        return transitions[Math.floor(Math.random() * transitions.length)] + \" \" + s.charAt(0).toLowerCase() + s.slice(1);\n    }\n    return s;\n}\nconst TRANSITION_CANDIDATES = [\n    \"However,\",\n    \"Moreover,\",\n    \"Additionally,\",\n    \"Furthermore,\",\n    \"Meanwhile,\",\n    \"Instead,\",\n    \"Still,\",\n    \"Thus,\",\n    \"Therefore,\"\n];\nfunction analyzeSampleStyle(sample) {\n    const sentences = sample.split(/(?<=[.!?])\\s+/).filter((s)=>s.trim().length);\n    const lengths = sentences.map((s)=>s.length);\n    const avg = lengths.reduce((a, b)=>a + b, 0) / (lengths.length || 1);\n    const variance = lengths.reduce((a, b)=>a + Math.pow(b - avg, 2), 0) / (lengths.length || 1);\n    const std = Math.sqrt(variance);\n    const usesContractions = /\\b(?:[A-Za-z]+n't|it's|I'm|you're|we're|they're|that's)\\b/i.test(sample);\n    // Count transitions\n    const transitionCounts = {};\n    for (const t of TRANSITION_CANDIDATES){\n        const rx = new RegExp(\"^\" + escapeReg(t) + \"\\\\s\", \"gmi\");\n        const count = (sample.match(rx) || []).length;\n        if (count) transitionCounts[t] = count;\n    }\n    const preferredTransitions = Object.entries(transitionCounts).sort((a, b)=>b[1] - a[1]).slice(0, 3).map(([t])=>t);\n    // High frequency words (exclude stopwords)\n    const STOP = new Set([\n        \"the\",\n        \"a\",\n        \"an\",\n        \"and\",\n        \"or\",\n        \"but\",\n        \"of\",\n        \"in\",\n        \"on\",\n        \"for\",\n        \"to\",\n        \"it\",\n        \"is\",\n        \"are\",\n        \"be\",\n        \"as\",\n        \"that\",\n        \"this\",\n        \"with\",\n        \"by\",\n        \"was\",\n        \"were\",\n        \"at\"\n    ]);\n    const words = sample.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n    const freq = {};\n    for (const w of words){\n        if (!STOP.has(w)) freq[w] = (freq[w] || 0) + 1;\n    }\n    const highFrequencyWords = Object.entries(freq).sort((a, b)=>b[1] - a[1]).slice(0, 30).map(([w])=>w);\n    const commaCount = (sample.match(/,/g) || []).length;\n    const semiCount = (sample.match(/;/g) || []).length;\n    const transitionStarts = sentences.filter((s)=>/^\\s*(However,|Moreover,|Additionally,|Furthermore,|Meanwhile,|Instead,|Still,|Thus,|Therefore,)/i.test(s)).length;\n    // Simple adverb extraction (ending with ly, length >4) frequency\n    const adverbFreq = {};\n    (sample.match(/\\b[a-z]{5,}ly\\b/gi) || []).forEach((w)=>{\n        adverbFreq[w.toLowerCase()] = (adverbFreq[w.toLowerCase()] || 0) + 1;\n    });\n    const topAdverbs = Object.entries(adverbFreq).sort((a, b)=>b[1] - a[1]).slice(0, 5).map(([w])=>w);\n    // Enhanced analysis for AI prompting\n    const allWords = sample.split(/\\s+/);\n    const wordLengths = allWords.map((w)=>w.replace(/[^\\w]/g, \"\").length).filter((l)=>l > 0);\n    const avgWordLength = wordLengths.reduce((sum, len)=>sum + len, 0) / wordLengths.length;\n    // Vocabulary complexity analysis\n    const complexWords = allWords.filter((w)=>w.replace(/[^\\w]/g, \"\").length > 7);\n    const vocabularyComplexity = complexWords.length / allWords.length;\n    // Sentence type analysis\n    const questionSentences = sentences.filter((s)=>s.includes(\"?\")).length;\n    const exclamatorySentences = sentences.filter((s)=>s.includes(\"!\")).length;\n    const questionRatio = sentences.length ? questionSentences / sentences.length : 0;\n    const exclamatoryRatio = sentences.length ? exclamatorySentences / sentences.length : 0;\n    // Sentence starter patterns\n    const sentenceStarters = sentences.map((s)=>{\n        const firstWord = s.trim().split(/\\s+/)[0]?.toLowerCase()?.replace(/[^\\w]/g, \"\");\n        return firstWord;\n    }).filter(Boolean);\n    const starterPatterns = {};\n    sentenceStarters.forEach((starter)=>{\n        if (starter && starter.length > 2) {\n            starterPatterns[starter] = (starterPatterns[starter] || 0) + 1;\n        }\n    });\n    const commonStarters = Object.entries(starterPatterns).sort(([, a], [, b])=>b - a).slice(0, 5).map(([starter])=>starter);\n    // Conjunction density\n    const conjunctions = [\n        \"and\",\n        \"but\",\n        \"or\",\n        \"nor\",\n        \"yet\",\n        \"so\",\n        \"because\",\n        \"since\",\n        \"although\",\n        \"while\",\n        \"if\",\n        \"unless\"\n    ];\n    const conjunctionCount = conjunctions.reduce((count, conj)=>{\n        const regex = new RegExp(`\\\\b${conj}\\\\b`, \"gi\");\n        return count + (sample.match(regex) || []).length;\n    }, 0);\n    const conjunctionDensity = sentences.length ? conjunctionCount / sentences.length : 0;\n    // Descriptive language patterns\n    const adjectivePatterns = /\\b(beautiful|amazing|wonderful|terrible|horrible|excellent|outstanding|remarkable|extraordinary|incredible|fantastic|brilliant|magnificent|stunning|gorgeous|lovely|charming|delightful|pleasant|impressive|significant|important|crucial|essential|vital|necessary|useful|helpful|effective|successful|powerful|strong|weak|small|large|huge|tiny|enormous|massive|great|good|bad|poor|rich|expensive|cheap|easy|difficult|hard|simple|complex|complicated)\\b/gi;\n    const adjectives = sample.match(adjectivePatterns) || [];\n    const adjectiveDensity = adjectives.length / allWords.length;\n    // Tone analysis\n    const positiveWords = [\n        \"good\",\n        \"great\",\n        \"excellent\",\n        \"amazing\",\n        \"wonderful\",\n        \"fantastic\",\n        \"brilliant\",\n        \"outstanding\",\n        \"impressive\",\n        \"successful\",\n        \"effective\",\n        \"helpful\",\n        \"useful\",\n        \"important\",\n        \"significant\",\n        \"valuable\",\n        \"beneficial\"\n    ];\n    const negativeWords = [\n        \"bad\",\n        \"terrible\",\n        \"horrible\",\n        \"awful\",\n        \"poor\",\n        \"weak\",\n        \"difficult\",\n        \"hard\",\n        \"complicated\",\n        \"problematic\",\n        \"challenging\",\n        \"concerning\",\n        \"disappointing\",\n        \"ineffective\",\n        \"useless\"\n    ];\n    const positiveCount = positiveWords.reduce((count, word)=>{\n        const regex = new RegExp(`\\\\b${word}\\\\b`, \"gi\");\n        return count + (sample.match(regex) || []).length;\n    }, 0);\n    const negativeCount = negativeWords.reduce((count, word)=>{\n        const regex = new RegExp(`\\\\b${word}\\\\b`, \"gi\");\n        return count + (sample.match(regex) || []).length;\n    }, 0);\n    const toneBalance = positiveCount > negativeCount ? \"positive\" : negativeCount > positiveCount ? \"negative\" : \"neutral\";\n    // Personal voice analysis\n    const firstPersonPronouns = (sample.match(/\\b(I|me|my|mine|myself|we|us|our|ours|ourselves)\\b/gi) || []).length;\n    const secondPersonPronouns = (sample.match(/\\b(you|your|yours|yourself|yourselves)\\b/gi) || []).length;\n    const thirdPersonPronouns = (sample.match(/\\b(he|she|it|they|him|her|them|his|hers|its|their|theirs|himself|herself|itself|themselves)\\b/gi) || []).length;\n    const personalVoice = firstPersonPronouns > secondPersonPronouns + thirdPersonPronouns ? \"first-person\" : secondPersonPronouns > firstPersonPronouns + thirdPersonPronouns ? \"second-person\" : \"third-person\";\n    // ENHANCED SENTENCE CONSTRUCTION ANALYSIS\n    // Sentence structure patterns\n    const sentenceStructures = sentences.map((sentence)=>{\n        const trimmed = sentence.trim();\n        const hasSubordinate = /\\b(because|since|although|while|if|unless|when|where|that|which)\\b/i.test(trimmed);\n        const hasCoordinate = /\\b(and|but|or|nor|yet|so)\\b/i.test(trimmed);\n        const hasParentheticals = /\\([^)]+\\)|\\[[^\\]]+\\]|,\\s+[^,]+,/g.test(trimmed);\n        const hasAppositive = /,\\s+(?:a|an|the)\\s+\\w+(?:\\s+\\w+)*,/i.test(trimmed);\n        const startsWithDependent = /^(?:Because|Since|Although|While|If|Unless|When|Where|That|Which)\\b/i.test(trimmed);\n        return {\n            hasSubordinate,\n            hasCoordinate,\n            hasParentheticals,\n            hasAppositive,\n            startsWithDependent,\n            length: trimmed.length\n        };\n    });\n    // Calculate construction preferences\n    const constructionPatterns = {\n        subordinateClauseRatio: sentenceStructures.filter((s)=>s.hasSubordinate).length / sentences.length,\n        coordinateClauseRatio: sentenceStructures.filter((s)=>s.hasCoordinate).length / sentences.length,\n        parentheticalRatio: sentenceStructures.filter((s)=>s.hasParentheticals).length / sentences.length,\n        appositiveRatio: sentenceStructures.filter((s)=>s.hasAppositive).length / sentences.length,\n        frontLoadedDependentRatio: sentenceStructures.filter((s)=>s.startsWithDependent).length / sentences.length\n    };\n    // Punctuation patterns\n    const punctuationPatterns = {\n        dashUsage: (sample.match(/—|--/g) || []).length,\n        colonUsage: (sample.match(/:/g) || []).length,\n        ellipsisUsage: (sample.match(/\\.\\.\\./g) || []).length,\n        quotationUsage: (sample.match(/[\"']/g) || []).length\n    };\n    // Sentence complexity analysis\n    const clausePatterns = sentences.map((sentence)=>{\n        const clauses = sentence.split(/[,;]/).length;\n        return clauses;\n    });\n    const avgClausesPerSentence = clausePatterns.reduce((sum, count)=>sum + count, 0) / clausePatterns.length;\n    // Parallel structure detection\n    const parallelStructures = sentences.filter((sentence)=>{\n        // Look for patterns like \"X, Y, and Z\" or \"to X, to Y, and to Z\"\n        const parallelPatterns = [\n            /\\b\\w+ing,\\s*\\w+ing,?\\s*(?:and|or)\\s*\\w+ing\\b/g,\n            /\\bto\\s+\\w+,\\s*to\\s+\\w+,?\\s*(?:and|or)\\s*to\\s+\\w+\\b/g,\n            /\\b(?:the|a|an)\\s+\\w+,\\s*(?:the|a|an)\\s+\\w+,?\\s*(?:and|or)\\s*(?:the|a|an)\\s+\\w+\\b/g\n        ];\n        return parallelPatterns.some((pattern)=>pattern.test(sentence));\n    }).length;\n    const parallelStructureRatio = sentences.length ? parallelStructures / sentences.length : 0;\n    // Modifier placement patterns\n    const modifierPatterns = {\n        frontLoadedAdverbs: sentences.filter((s)=>/^\\s*\\w+ly,?\\s+/i.test(s)).length / sentences.length,\n        midSentenceAdverbs: sentences.filter((s)=>/,\\s+\\w+ly,?\\s+/i.test(s)).length / sentences.length,\n        endSentenceAdverbs: sentences.filter((s)=>/\\s+\\w+ly\\.?$/i.test(s)).length / sentences.length\n    };\n    return {\n        avgSentenceLength: avg,\n        sentenceLengthStd: std,\n        usesContractions,\n        preferredTransitions,\n        highFrequencyWords,\n        commaPerSentence: sentences.length ? commaCount / sentences.length : 0,\n        semicolonRatio: sentences.length ? semiCount / sentences.length : 0,\n        transitionStartRatio: sentences.length ? transitionStarts / sentences.length : 0,\n        topAdverbs,\n        // Enhanced properties for AI prompting\n        avgWordLength,\n        vocabularyComplexity,\n        questionRatio,\n        exclamatoryRatio,\n        commonStarters,\n        conjunctionDensity,\n        adjectiveDensity,\n        toneBalance,\n        personalVoice,\n        // NEW: Sentence construction patterns\n        constructionPatterns,\n        punctuationPatterns,\n        avgClausesPerSentence,\n        parallelStructureRatio,\n        modifierPatterns\n    };\n}\n// Adapt output to more closely reflect sample stylistic metrics (light touch to preserve meaning)\nfunction adaptToSampleStyle(original, current, sampleStyle) {\n    let out = current;\n    const sentences = out.split(/(?<=[.!?])\\s+/).filter(Boolean);\n    // Adjust sentence length distribution toward sample average (merge or split)\n    const curAvg = sentences.reduce((a, b)=>a + b.length, 0) / (sentences.length || 1);\n    if (sampleStyle.avgSentenceLength && Math.abs(curAvg - sampleStyle.avgSentenceLength) > 40) {\n        if (curAvg < sampleStyle.avgSentenceLength) {\n            // merge adjacent short sentences\n            for(let i = 0; i < sentences.length - 1; i++){\n                if (sentences[i].length < 70 && sentences[i + 1].length < 70) {\n                    sentences[i] = sentences[i].replace(/[.!?]$/, \"\") + \", \" + sentences[i + 1].charAt(0).toLowerCase() + sentences[i + 1].slice(1);\n                    sentences.splice(i + 1, 1);\n                    i--;\n                    if (sentences.reduce((a, b)=>a + b.length, 0) / (sentences.length || 1) >= sampleStyle.avgSentenceLength) break;\n                }\n            }\n        } else {\n            // split long sentences on commas\n            for(let i = 0; i < sentences.length; i++){\n                if (sentences[i].length > 160) {\n                    const parts = sentences[i].split(/,\\s+/);\n                    if (parts.length > 2) {\n                        const first = parts.slice(0, Math.ceil(parts.length / 2)).join(\", \");\n                        const second = parts.slice(Math.ceil(parts.length / 2)).join(\", \");\n                        sentences[i] = first + \".\";\n                        sentences.splice(i + 1, 0, second.charAt(0).toUpperCase() + second.slice(1));\n                        i++;\n                    }\n                }\n            }\n        }\n    }\n    out = sentences.join(\" \");\n    // Increase transitional openings if sample uses them frequently\n    if (sampleStyle.transitionStartRatio > 0.3) {\n        const transNeeded = Math.ceil(sentences.length * sampleStyle.transitionStartRatio);\n        let applied = 0;\n        for(let i = 0; i < sentences.length && applied < transNeeded; i++){\n            if (!/^\\s*(However,|Moreover,|Additionally,|Furthermore,|Meanwhile,|Instead,|Still,|Thus,|Therefore,)/i.test(sentences[i])) {\n                const t = sampleStyle.preferredTransitions[applied % sampleStyle.preferredTransitions.length] || \"However,\";\n                sentences[i] = t + \" \" + sentences[i].charAt(0).toLowerCase() + sentences[i].slice(1);\n                applied++;\n            }\n        }\n        out = sentences.join(\" \");\n    }\n    // If comma density in sample higher, lightly add commas before which/that clauses\n    if (sampleStyle.commaPerSentence > 1.2) {\n        out = out.replace(/\\bwhich\\s+/gi, \"which \").replace(/\\bthat\\s+/gi, \"that \");\n        out = out.replace(/\\b(which|that)\\s+([a-z]+)/gi, (m, rel, nxt)=>\", \" + rel + \" \" + nxt);\n    }\n    // REMOVED: Auto-injection of adverbs that breaks sentence structure\n    // The AI should handle vocabulary naturally without forced insertions\n    // If lexical change is still very low (<12%) relative to original, force additional variation\n    if (lexicalChangeRatio(original, out) < 0.12) {\n        out = forceVariation(out, 0.18);\n    }\n    return out;\n}\n// --- Artifact & spelling cleanup ---\nfunction fixSpellingArtifacts(text) {\n    let t = text;\n    // Collapse accidental immediate word repetitions (case-insensitive) for words > 3 chars, keep first.\n    t = t.replace(/\\b([A-Za-z]{4,})\\b(\\s+\\1\\b)+/gi, (m, w)=>w);\n    // Target a second pass for shorter duplicated function words (is is, the the)\n    t = t.replace(/\\b(is|the|and|to|of)\\b\\s+\\1\\b/gi, \"$1\");\n    // Common adverb / adjective minor typos introduced by trimming or extra letter\n    const CORRECTIONS = {\n        \"especialy\": \"especially\",\n        \"especiallyy\": \"especially\",\n        \"especiallyus\": \"especially\",\n        \"lumino\": \"luminous\",\n        \"luminous\": \"luminous\",\n        \"notabl\": \"notably\",\n        \"definately\": \"definitely\",\n        \"seperately\": \"separately\",\n        \"architecure\": \"architecture\",\n        \"exsistence\": \"existence\",\n        \"existance\": \"existence\",\n        \"cognative\": \"cognitive\",\n        \"algorithmic\": \"algorithmic\",\n        \"necesitate\": \"necessitate\",\n        \"necessitate\": \"necessitate\"\n    };\n    t = t.replace(/\\b[A-Za-z]{5,}\\b/g, (w)=>{\n        const lower = w.toLowerCase();\n        if (CORRECTIONS[lower]) {\n            const rep = CORRECTIONS[lower];\n            return w[0] === w[0].toUpperCase() ? rep.charAt(0).toUpperCase() + rep.slice(1) : rep;\n        }\n        // Trailing duplicated last char heuristic (especiallyy -> especially) if removing one yields existing English-looking pattern\n        if (/([a-z])\\1$/i.test(w) && w.length > 6) {\n            const trimmed = w.slice(0, -1);\n            if (trimmed.endsWith(\"ly\") || trimmed.endsWith(\"ily\") || trimmed.endsWith(\"ally\")) return trimmed;\n        }\n        // Handle malformed words with embedded duplications (especiallyus -> especially)\n        if (/ly[a-z]+$/i.test(w)) {\n            const baseMatch = w.match(/^([a-z]+ly)/i);\n            if (baseMatch && baseMatch[1].length >= 6) {\n                const base = baseMatch[1];\n                const corrected = CORRECTIONS[base.toLowerCase()] || base;\n                return w[0] === w[0].toUpperCase() ? corrected.charAt(0).toUpperCase() + corrected.slice(1) : corrected;\n            }\n        }\n        // Handle truncated words missing last letter (lumino -> luminous)\n        if (w.length >= 6 && !w.endsWith(\"ly\") && !w.endsWith(\"ed\") && !w.endsWith(\"ing\")) {\n            for (const [typo, correct] of Object.entries(CORRECTIONS)){\n                if (correct.startsWith(w.toLowerCase()) && correct.length === w.length + 1) {\n                    return w[0] === w[0].toUpperCase() ? correct.charAt(0).toUpperCase() + correct.slice(1) : correct;\n                }\n            }\n        }\n        return w;\n    });\n    // Join short fragment sentences that were split incorrectly: pattern \". Yet as\" style\n    t = t.replace(/\\.\\s+(Yet|And|But)\\s+as\\b/g, \", yet as\");\n    // Merge very short fragment preceding capitalized continuation (avoid proper nouns) e.g. \"Cities, no longer confined... Ascend as\" -> \", no longer confined ... ascend as\"\n    t = t.replace(/([a-z]),?\\s+([A-Z][a-z]+),?\\s+no longer ([^.]+)\\.\\s+([A-Z][a-z]+)scend as/gi, (m, a, city, rest, asc)=>`${a}, ${city.toLowerCase()}, no longer ${rest}, ascend as`);\n    // Remove doubled spaces from edits\n    t = t.replace(/ {2,}/g, \" \");\n    // Lightweight dictionary-based single-letter omission fix for common adverbs ending in 'ly'\n    const COMMON_ADVERBS = [\n        \"notably\",\n        \"especially\",\n        \"clearly\",\n        \"simply\",\n        \"truly\",\n        \"really\",\n        \"generally\",\n        \"directly\",\n        \"precisely\",\n        \"roughly\",\n        \"nearly\",\n        \"slowly\",\n        \"quickly\",\n        \"rapidly\",\n        \"seamlessly\",\n        \"effortlessly\"\n    ];\n    t = t.replace(/\\b([A-Za-z]{5,})\\b/g, (w)=>{\n        const lower = w.toLowerCase();\n        if (COMMON_ADVERBS.includes(lower)) return w; // ok\n        if (!/[a-z]bl$/i.test(w) && !/[a-z]ll?y$/i.test(w)) return w;\n        // missing 'y' pattern: notabl -> notably\n        if (COMMON_ADVERBS.includes(lower + \"y\")) {\n            const rep = lower + \"y\";\n            return w[0] === w[0].toUpperCase() ? rep.charAt(0).toUpperCase() + rep.slice(1) : rep;\n        }\n        return w;\n    });\n    // Fix common word boundary issues and malformed compound words\n    t = t.replace(/\\ban complex\\b/gi, \"a complex\");\n    t = t.replace(/\\bnecessitate necessitate\\b/gi, \"necessitate\");\n    t = t.replace(/\\bthat's at once\\b/gi, \"that is at once\");\n    // Remove artifacts from aggressive rewriting\n    t = t.replace(/\\s+(us|ly)\\b(?=\\s+[a-z])/gi, \"\");\n    t = t.replace(/\\bespecially especially\\b/gi, \"especially\");\n    return t;\n}\n// Validate style application & repair if constraints unmet\nfunction validateAndRepair(out, profile) {\n    if (!profile) return out;\n    let text = out;\n    // Ensure custom lexicon words appear (at least 1 missing -> inject near end)\n    if (profile.customLexicon?.length) {\n        const missing = profile.customLexicon.filter((w)=>!new RegExp(`\\\\b${escapeReg(w)}\\\\b`, \"i\").test(text));\n        if (missing.length) {\n            text += (text.endsWith(\".\") ? \"\" : \".\") + \" \" + missing.slice(0, 2).join(\", \") + \".\";\n        }\n    }\n    // Directness high: remove flowery adjectives\n    if (profile.directness > 0.8) {\n        const FLOWERY = /(hypnotic|hypnotizing|luminous|shimmering|radiant|ethereal|boundless|symphonic|harmonic|crystalline|algorithmic|infinite|perpetual)\\b/gi;\n        text = text.replace(FLOWERY, (m)=>{\n            const simpleMap = {\n                luminous: \"bright\",\n                shimmering: \"bright\",\n                radiant: \"bright\",\n                ethereal: \"light\",\n                boundless: \"wide\",\n                symphonic: \"coordinated\",\n                harmonic: \"balanced\",\n                crystalline: \"clear\",\n                algorithmic: \"automated\",\n                infinite: \"vast\",\n                perpetual: \"continuous\",\n                hypnotic: \"engaging\",\n                hypnotizing: \"engaging\"\n            };\n            const lower = m.toLowerCase();\n            return simpleMap[lower] || \"\";\n        });\n    }\n    // Descriptiveness low: strip many adverbs\n    if (profile.descriptiveness < 0.3) {\n        text = text.replace(/\\b\\w+ly\\b/g, (m)=>profile.customLexicon?.includes(m) ? m : \"\");\n    }\n    // Pacing adjustments\n    const sentences = text.split(/(?<=[.!?])\\s+/).filter(Boolean);\n    if (profile.pacing > 0.75) {\n        for(let i = 0; i < sentences.length; i++){\n            if (sentences[i].length > 140) {\n                sentences[i] = sentences[i].replace(/,\\s+([a-z])/gi, \". $1\");\n            }\n        }\n    } else if (profile.pacing < 0.25) {\n        for(let i = 0; i < sentences.length - 1; i++){\n            if (sentences[i].length < 60 && sentences[i + 1].length < 60) {\n                sentences[i] = sentences[i].replace(/[.!?]$/, \"\") + \", \" + sentences[i + 1].charAt(0).toLowerCase() + sentences[i + 1].slice(1);\n                sentences.splice(i + 1, 1);\n                i--;\n            }\n        }\n    }\n    text = sentences.join(\" \");\n    // Final spelling artifact cleanup after repairs\n    text = fixSpellingArtifacts(text);\n    return text;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/paraphrase.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/rateLimit.ts":
/*!******************************!*\
  !*** ./src/lib/rateLimit.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatRateLimitHeaders: () => (/* binding */ formatRateLimitHeaders),\n/* harmony export */   rateLimit: () => (/* binding */ rateLimit)\n/* harmony export */ });\n// Simple in-memory rate limiter (fixed window). For production replace with Redis / durable store.\nconst WINDOW_MS = 60000;\nconst MAX = 30;\nconst store = globalThis.__RL_STORE__ || new Map();\nglobalThis.__RL_STORE__ = store;\nfunction rateLimit(key, opts) {\n    const limit = opts?.limit ?? MAX;\n    const windowMs = opts?.windowMs ?? WINDOW_MS;\n    const now = Date.now();\n    const b = store.get(key);\n    if (!b || b.reset <= now) {\n        const fresh = {\n            count: 1,\n            reset: now + windowMs\n        };\n        store.set(key, fresh);\n        return {\n            limited: false,\n            remaining: limit - 1,\n            reset: fresh.reset,\n            limit\n        };\n    }\n    if (b.count >= limit) return {\n        limited: true,\n        remaining: 0,\n        reset: b.reset,\n        limit\n    };\n    b.count += 1;\n    return {\n        limited: false,\n        remaining: limit - b.count,\n        reset: b.reset,\n        limit\n    };\n}\nfunction formatRateLimitHeaders(r) {\n    return {\n        \"X-RateLimit-Limit\": r.limit.toString(),\n        \"X-RateLimit-Remaining\": r.remaining.toString(),\n        \"X-RateLimit-Reset\": r.reset.toString()\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3JhdGVMaW1pdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLG1HQUFtRztBQUVuRyxNQUFNQSxZQUFZO0FBQ2xCLE1BQU1DLE1BQU07QUFDWixNQUFNQyxRQUE2QixXQUFvQkUsWUFBWSxJQUFJLElBQUlDO0FBQzFFRixXQUFtQkMsWUFBWSxHQUFHRjtBQUU1QixTQUFTSSxVQUFVQyxHQUFXLEVBQUVDLElBQTRDO0lBQ2pGLE1BQU1DLFFBQVFELE1BQU1DLFNBQVNSO0lBQUssTUFBTVMsV0FBV0YsTUFBTUUsWUFBWVY7SUFBVyxNQUFNVyxNQUFNQyxLQUFLRCxHQUFHO0lBQ3BHLE1BQU1FLElBQUlYLE1BQU1ZLEdBQUcsQ0FBQ1A7SUFDcEIsSUFBSSxDQUFDTSxLQUFLQSxFQUFFRSxLQUFLLElBQUlKLEtBQUs7UUFBRSxNQUFNSyxRQUFRO1lBQUVDLE9BQU87WUFBR0YsT0FBT0osTUFBTUQ7UUFBUztRQUFHUixNQUFNZ0IsR0FBRyxDQUFDWCxLQUFLUztRQUFRLE9BQU87WUFBRUcsU0FBUztZQUFPQyxXQUFXWCxRQUFRO1lBQUdNLE9BQU9DLE1BQU1ELEtBQUs7WUFBRU47UUFBTTtJQUFHO0lBQ2xMLElBQUlJLEVBQUVJLEtBQUssSUFBSVIsT0FBTyxPQUFPO1FBQUVVLFNBQVM7UUFBTUMsV0FBVztRQUFHTCxPQUFPRixFQUFFRSxLQUFLO1FBQUVOO0lBQU07SUFDbEZJLEVBQUVJLEtBQUssSUFBSTtJQUFHLE9BQU87UUFBRUUsU0FBUztRQUFPQyxXQUFXWCxRQUFRSSxFQUFFSSxLQUFLO1FBQUVGLE9BQU9GLEVBQUVFLEtBQUs7UUFBRU47SUFBTTtBQUMzRjtBQUNPLFNBQVNZLHVCQUF1QkMsQ0FBa0I7SUFBSSxPQUFPO1FBQUUscUJBQXFCQSxFQUFFYixLQUFLLENBQUNjLFFBQVE7UUFBSSx5QkFBeUJELEVBQUVGLFNBQVMsQ0FBQ0csUUFBUTtRQUFJLHFCQUFxQkQsRUFBRVAsS0FBSyxDQUFDUSxRQUFRO0lBQUc7QUFBRyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0eWxlc3luYy8uL3NyYy9saWIvcmF0ZUxpbWl0LnRzPzRlNTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU2ltcGxlIGluLW1lbW9yeSByYXRlIGxpbWl0ZXIgKGZpeGVkIHdpbmRvdykuIEZvciBwcm9kdWN0aW9uIHJlcGxhY2Ugd2l0aCBSZWRpcyAvIGR1cmFibGUgc3RvcmUuXHJcbmludGVyZmFjZSBCdWNrZXQgeyBjb3VudDogbnVtYmVyOyByZXNldDogbnVtYmVyIH1cclxuY29uc3QgV0lORE9XX01TID0gNjBfMDAwO1xyXG5jb25zdCBNQVggPSAzMDtcclxuY29uc3Qgc3RvcmU6IE1hcDxzdHJpbmcsIEJ1Y2tldD4gPSAoZ2xvYmFsVGhpcyBhcyBhbnkpLl9fUkxfU1RPUkVfXyB8fCBuZXcgTWFwKCk7XHJcbihnbG9iYWxUaGlzIGFzIGFueSkuX19STF9TVE9SRV9fID0gc3RvcmU7XHJcbmV4cG9ydCBpbnRlcmZhY2UgUmF0ZUxpbWl0UmVzdWx0IHsgbGltaXRlZDogYm9vbGVhbjsgcmVtYWluaW5nOiBudW1iZXI7IHJlc2V0OiBudW1iZXI7IGxpbWl0OiBudW1iZXIgfVxyXG5leHBvcnQgZnVuY3Rpb24gcmF0ZUxpbWl0KGtleTogc3RyaW5nLCBvcHRzPzogeyBsaW1pdD86IG51bWJlcjsgd2luZG93TXM/OiBudW1iZXIgfSk6IFJhdGVMaW1pdFJlc3VsdCB7XHJcbiAgY29uc3QgbGltaXQgPSBvcHRzPy5saW1pdCA/PyBNQVg7IGNvbnN0IHdpbmRvd01zID0gb3B0cz8ud2luZG93TXMgPz8gV0lORE9XX01TOyBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG4gIGNvbnN0IGIgPSBzdG9yZS5nZXQoa2V5KTtcclxuICBpZiAoIWIgfHwgYi5yZXNldCA8PSBub3cpIHsgY29uc3QgZnJlc2ggPSB7IGNvdW50OiAxLCByZXNldDogbm93ICsgd2luZG93TXMgfTsgc3RvcmUuc2V0KGtleSwgZnJlc2gpOyByZXR1cm4geyBsaW1pdGVkOiBmYWxzZSwgcmVtYWluaW5nOiBsaW1pdCAtIDEsIHJlc2V0OiBmcmVzaC5yZXNldCwgbGltaXQgfTsgfVxyXG4gIGlmIChiLmNvdW50ID49IGxpbWl0KSByZXR1cm4geyBsaW1pdGVkOiB0cnVlLCByZW1haW5pbmc6IDAsIHJlc2V0OiBiLnJlc2V0LCBsaW1pdCB9O1xyXG4gIGIuY291bnQgKz0gMTsgcmV0dXJuIHsgbGltaXRlZDogZmFsc2UsIHJlbWFpbmluZzogbGltaXQgLSBiLmNvdW50LCByZXNldDogYi5yZXNldCwgbGltaXQgfTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0UmF0ZUxpbWl0SGVhZGVycyhyOiBSYXRlTGltaXRSZXN1bHQpIHsgcmV0dXJuIHsgJ1gtUmF0ZUxpbWl0LUxpbWl0Jzogci5saW1pdC50b1N0cmluZygpLCAnWC1SYXRlTGltaXQtUmVtYWluaW5nJzogci5yZW1haW5pbmcudG9TdHJpbmcoKSwgJ1gtUmF0ZUxpbWl0LVJlc2V0Jzogci5yZXNldC50b1N0cmluZygpIH07IH1cclxuIl0sIm5hbWVzIjpbIldJTkRPV19NUyIsIk1BWCIsInN0b3JlIiwiZ2xvYmFsVGhpcyIsIl9fUkxfU1RPUkVfXyIsIk1hcCIsInJhdGVMaW1pdCIsImtleSIsIm9wdHMiLCJsaW1pdCIsIndpbmRvd01zIiwibm93IiwiRGF0ZSIsImIiLCJnZXQiLCJyZXNldCIsImZyZXNoIiwiY291bnQiLCJzZXQiLCJsaW1pdGVkIiwicmVtYWluaW5nIiwiZm9ybWF0UmF0ZUxpbWl0SGVhZGVycyIsInIiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/rateLimit.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/styleFrequency.ts":
/*!***********************************!*\
  !*** ./src/lib/styleFrequency.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildFrequencyMap: () => (/* binding */ buildFrequencyMap),\n/* harmony export */   pickPreferred: () => (/* binding */ pickPreferred)\n/* harmony export */ });\n// Build a simple frequency map from user sample writing.\nfunction buildFrequencyMap(text) {\n    const freq = {};\n    if (!text) return freq;\n    const tokens = text.toLowerCase().split(/[^a-zA-Z']+/).filter(Boolean);\n    for (const t of tokens)freq[t] = (freq[t] || 0) + 1;\n    return freq;\n}\n// Score a candidate synonym list against frequency map; prefer words the user already uses.\nfunction pickPreferred(list, freq) {\n    if (!list.length) return null;\n    let best = list[0];\n    let bestScore = -1;\n    for (const w of list){\n        const score = freq[w.toLowerCase()] || 0;\n        if (score > bestScore) {\n            best = w;\n            bestScore = score;\n        }\n    }\n    return bestScore > 0 ? best : null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N0eWxlRnJlcXVlbmN5LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseURBQXlEO0FBQ2xELFNBQVNBLGtCQUFrQkMsSUFBWTtJQUM1QyxNQUFNQyxPQUErQixDQUFDO0lBQ3RDLElBQUksQ0FBQ0QsTUFBTSxPQUFPQztJQUNsQixNQUFNQyxTQUFTRixLQUFLRyxXQUFXLEdBQUdDLEtBQUssQ0FBQyxlQUFlQyxNQUFNLENBQUNDO0lBQzlELEtBQUssTUFBTUMsS0FBS0wsT0FBUUQsSUFBSSxDQUFDTSxFQUFFLEdBQUcsQ0FBQ04sSUFBSSxDQUFDTSxFQUFFLElBQUksS0FBSztJQUNuRCxPQUFPTjtBQUNUO0FBRUEsNEZBQTRGO0FBQ3JGLFNBQVNPLGNBQWNDLElBQWMsRUFBRVIsSUFBNEI7SUFDeEUsSUFBSSxDQUFDUSxLQUFLQyxNQUFNLEVBQUUsT0FBTztJQUN6QixJQUFJQyxPQUFPRixJQUFJLENBQUMsRUFBRTtJQUNsQixJQUFJRyxZQUFZLENBQUM7SUFDakIsS0FBSyxNQUFNQyxLQUFLSixLQUFNO1FBQ3BCLE1BQU1LLFFBQVFiLElBQUksQ0FBQ1ksRUFBRVYsV0FBVyxHQUFHLElBQUk7UUFDdkMsSUFBSVcsUUFBUUYsV0FBVztZQUFFRCxPQUFPRTtZQUFHRCxZQUFZRTtRQUFPO0lBQ3hEO0lBQ0EsT0FBT0YsWUFBWSxJQUFJRCxPQUFPO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3R5bGVzeW5jLy4vc3JjL2xpYi9zdHlsZUZyZXF1ZW5jeS50cz8zZTY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEJ1aWxkIGEgc2ltcGxlIGZyZXF1ZW5jeSBtYXAgZnJvbSB1c2VyIHNhbXBsZSB3cml0aW5nLlxyXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRGcmVxdWVuY3lNYXAodGV4dDogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiB7XHJcbiAgY29uc3QgZnJlcTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xyXG4gIGlmICghdGV4dCkgcmV0dXJuIGZyZXE7XHJcbiAgY29uc3QgdG9rZW5zID0gdGV4dC50b0xvd2VyQ2FzZSgpLnNwbGl0KC9bXmEtekEtWiddKy8pLmZpbHRlcihCb29sZWFuKTtcclxuICBmb3IgKGNvbnN0IHQgb2YgdG9rZW5zKSBmcmVxW3RdID0gKGZyZXFbdF0gfHwgMCkgKyAxO1xyXG4gIHJldHVybiBmcmVxO1xyXG59XHJcblxyXG4vLyBTY29yZSBhIGNhbmRpZGF0ZSBzeW5vbnltIGxpc3QgYWdhaW5zdCBmcmVxdWVuY3kgbWFwOyBwcmVmZXIgd29yZHMgdGhlIHVzZXIgYWxyZWFkeSB1c2VzLlxyXG5leHBvcnQgZnVuY3Rpb24gcGlja1ByZWZlcnJlZChsaXN0OiBzdHJpbmdbXSwgZnJlcTogUmVjb3JkPHN0cmluZywgbnVtYmVyPik6IHN0cmluZyB8IG51bGwge1xyXG4gIGlmICghbGlzdC5sZW5ndGgpIHJldHVybiBudWxsO1xyXG4gIGxldCBiZXN0ID0gbGlzdFswXTtcclxuICBsZXQgYmVzdFNjb3JlID0gLTE7XHJcbiAgZm9yIChjb25zdCB3IG9mIGxpc3QpIHtcclxuICAgIGNvbnN0IHNjb3JlID0gZnJlcVt3LnRvTG93ZXJDYXNlKCldIHx8IDA7XHJcbiAgICBpZiAoc2NvcmUgPiBiZXN0U2NvcmUpIHsgYmVzdCA9IHc7IGJlc3RTY29yZSA9IHNjb3JlOyB9XHJcbiAgfVxyXG4gIHJldHVybiBiZXN0U2NvcmUgPiAwID8gYmVzdCA6IG51bGw7XHJcbn1cclxuIl0sIm5hbWVzIjpbImJ1aWxkRnJlcXVlbmN5TWFwIiwidGV4dCIsImZyZXEiLCJ0b2tlbnMiLCJ0b0xvd2VyQ2FzZSIsInNwbGl0IiwiZmlsdGVyIiwiQm9vbGVhbiIsInQiLCJwaWNrUHJlZmVycmVkIiwibGlzdCIsImxlbmd0aCIsImJlc3QiLCJiZXN0U2NvcmUiLCJ3Iiwic2NvcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/styleFrequency.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/styleRules.ts":
/*!*******************************!*\
  !*** ./src/lib/styleRules.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   STYLE_RULE_PROMPT: () => (/* binding */ STYLE_RULE_PROMPT),\n/* harmony export */   enforceStyleRules: () => (/* binding */ enforceStyleRules),\n/* harmony export */   enforceStyleRulesWithActions: () => (/* binding */ enforceStyleRulesWithActions)\n/* harmony export */ });\n// Strict style rule prompt and rule enforcement utilities.\nconst STYLE_RULE_PROMPT = `FOLLOW THIS WRITING STYLE STRICTLY:\\n• Use clear, simple language.\\n• Be spartan and informative.\\n• Short, impactful sentences (aim <= 18 words; split longer ones).\\n• Active voice (avoid passive like \"was done\").\\n• Practical, actionable insights.\\n• Bullet lists ONLY if original text clearly was a list; else plain paragraphs.\\n• Use data/examples ONLY if present in original (never fabricate).\\n• Address the reader with \"you\" / \"your\" for guidance.\\n• NO em dashes.\\n• NO metaphors, clichés, generic openings/closings.\\n• NO constructions like \"not just X, but also Y\".\\n• NO setup phrases (in conclusion, in closing, overall, it is important to note, etc.).\\n• NO warnings, meta commentary, or explanation of what you did.\\n• NO hashtags, markdown formatting, asterisks, decorative symbols.\\n• NO semicolons.\\n• Avoid these (case-insensitive): can, may, just, that, very, really, literally, actually, certainly, probably, basically, could, maybe, delve, embark, enlightening, esteemed, shed light, craft, crafting, imagine, realm, game-changer, unlock, discover, skyrocket, abyss, not alone, in a world where, revolutionize, disruptive, utilize, utilizing, dive deep, tapestry, illuminate, unveil, pivotal, intricate, elucidate, hence, furthermore, however, harness, exciting, groundbreaking, cutting-edge, remarkable, it, remains to be seen, glimpse into, navigating, landscape, stark, testament, in summary, in conclusion, moreover, boost, skyrocketing, opened up, powerful, inquiries, ever-evolving.\\nReturn ONLY the rewritten text. No prefatory phrases like \"Here is\". No extra commentary.`;\nconst BANNED_PATTERNS = [\n    /\\bcan\\b/gi,\n    /\\bmay\\b/gi,\n    /\\bjust\\b/gi,\n    /\\bvery\\b/gi,\n    /\\breally\\b/gi,\n    /\\bliterally\\b/gi,\n    /\\bactually\\b/gi,\n    /\\bcertainly\\b/gi,\n    /\\bprobably\\b/gi,\n    /\\bbasically\\b/gi,\n    /\\bcould\\b/gi,\n    /\\bmaybe\\b/gi,\n    /delve/gi,\n    /embark/gi,\n    /enlightening/gi,\n    /esteemed/gi,\n    /shed light/gi,\n    /craft(?:ing)?/gi,\n    /imagine/gi,\n    /\\brealm\\b/gi,\n    /game-?changer/gi,\n    /unlock/gi,\n    /skyrocket(?:ing)?/gi,\n    /abyss/gi,\n    /not alone/gi,\n    /in a world where/gi,\n    /revolutionize/gi,\n    /disruptive/gi,\n    /utiliz(?:e|ing)/gi,\n    /dive deep/gi,\n    /tapestry/gi,\n    /illuminat(?:e|ing)/gi,\n    /unveil/gi,\n    /pivotal/gi,\n    /intricate/gi,\n    /elucidate/gi,\n    /hence/gi,\n    /furthermore/gi,\n    /however/gi,\n    /harness/gi,\n    /exciting/gi,\n    /groundbreaking/gi,\n    /cutting-edge/gi,\n    /remarkable/gi,\n    /remains to be seen/gi,\n    /glimpse into/gi,\n    /navigating/gi,\n    /landscape/gi,\n    /stark/gi,\n    /testament/gi,\n    /in summary/gi,\n    /in conclusion/gi,\n    /moreover/gi,\n    /boost/gi,\n    /opened up/gi,\n    /powerful/gi,\n    /inquiries/gi,\n    /ever-evolving/gi\n];\nconst FORBIDDEN_OPENERS = [\n    /^here('?|)s a (?:paraphrased|rewritten) (?:version|take)[:\\-]?\\s*/i,\n    /^paraphrased (?:version|text)[:\\-]\\s*/i\n];\nfunction enforceStyleRulesWithActions(text, maxPasses = 3) {\n    let t = text.trim();\n    const actions = [];\n    FORBIDDEN_OPENERS.forEach((rx)=>{\n        if (rx.test(t)) {\n            actions.push({\n                code: \"removeOpener\",\n                meta: rx.source\n            });\n            t = t.replace(rx, \"\");\n        }\n    });\n    for(let pass = 0; pass < maxPasses; pass++){\n        let changed = false;\n        if (t.includes(\"—\")) {\n            t = t.replace(/—/g, \". \");\n            actions.push({\n                code: \"replaceEmDash\"\n            });\n            changed = true;\n        }\n        if (t.includes(\";\")) {\n            t = t.replace(/;/g, \". \");\n            actions.push({\n                code: \"replaceSemicolon\"\n            });\n            changed = true;\n        }\n        const beforeBullet = t;\n        t = t.replace(/^[#>*\\-+]+\\s+/gm, \"\");\n        if (beforeBullet !== t) {\n            actions.push({\n                code: \"stripBullets\"\n            });\n            changed = true;\n        }\n        BANNED_PATTERNS.forEach((rx)=>{\n            if (!rx.test(t)) return;\n            t = t.replace(rx, (m)=>{\n                const lowered = m.toLowerCase();\n                const replacement = simpleReplacement(lowered);\n                if (replacement === \"__KEEP__\") {\n                    return m; // do not alter\n                }\n                actions.push({\n                    code: \"removeBanned\",\n                    meta: lowered\n                });\n                return replacement; // may be '' for true fillers\n            });\n            changed = true;\n        });\n        const sentences = t.split(/(?<=[.!?])\\s+/).flatMap((s)=>{\n            const words = s.trim().split(/\\s+/);\n            if (words.length > 22) {\n                actions.push({\n                    code: \"splitLongSentence\",\n                    meta: {\n                        length: words.length\n                    }\n                });\n                const cut = Math.ceil(words.length / 2);\n                return [\n                    words.slice(0, cut).join(\" \") + \".\",\n                    words.slice(cut).join(\" \") + \".\"\n                ];\n            }\n            return [\n                s\n            ];\n        });\n        const joined = sentences.join(\" \").replace(/\\s{2,}/g, \" \").trim();\n        if (joined !== t) {\n            t = joined;\n            changed = true;\n        }\n        t = t.replace(/\\s{2,}/g, \" \").trim();\n        if (!changed) break;\n    }\n    const finalBefore = t;\n    t = t.replace(/(\\.){2,}/g, \".\");\n    if (finalBefore !== t) actions.push({\n        code: \"collapsePeriods\"\n    });\n    t = t.replace(/^[\\-\\*\\•\\s]+/, \"\").trim();\n    t = cleanArtifacts(t);\n    return {\n        text: t,\n        actions\n    };\n}\n// Backwards-compatible simple wrapper\nfunction enforceStyleRules(text, maxPasses = 3) {\n    return enforceStyleRulesWithActions(text, maxPasses).text;\n}\nfunction simpleReplacement(word) {\n    const map = {\n        \"however\": \"but\",\n        \"furthermore\": \"also\",\n        \"moreover\": \"also\",\n        \"hence\": \"so\",\n        \"thus\": \"so\",\n        \"therefore\": \"so\",\n        \"actually\": \"\",\n        \"very\": \"\",\n        // Avoid destructive removals: supply neutral substitutes\n        \"tapestry\": \"mesh\",\n        \"intricate\": \"complex\",\n        \"pivotal\": \"key\",\n        \"illuminate\": \"clarify\",\n        \"illuminating\": \"clarifying\",\n        \"unveil\": \"reveal\",\n        \"groundbreaking\": \"new\",\n        \"cutting-edge\": \"advanced\",\n        \"remarkable\": \"notable\",\n        \"exciting\": \"interesting\",\n        \"powerful\": \"strong\",\n        \"ever-evolving\": \"changing\",\n        \"landscape\": \"field\",\n        \"realm\": \"field\",\n        \"craft\": \"build\",\n        \"crafting\": \"building\",\n        \"harness\": \"use\",\n        \"unlock\": \"enable\",\n        \"game-changer\": \"major shift\",\n        \"revolutionize\": \"transform\",\n        // Keep structural words that hurt grammar if removed\n        \"that\": \"__KEEP__\"\n    };\n    return map[word] !== undefined ? map[word] : \"\";\n}\nfunction cleanArtifacts(s) {\n    return s.replace(/,\\./g, \",\").replace(/\\.,/g, \".\").replace(/\\s+'s\\b/g, \"'s\").replace(/\\bof\\s+of\\b/gi, \"of\").replace(/\\s{2,}/g, \" \").replace(/,\\s*\\./g, \".\").replace(/\\b(an)\\s+(?=of\\b)/gi, \"\") // remove stray 'an' before 'of' after adjective removal\n    .trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/styleRules.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/zod"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fparaphrase%2Froute&page=%2Fapi%2Fparaphrase%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fparaphrase%2Froute.ts&appDir=C%3A%5CUsers%5CDave%5CDesktop%5Cnew_Stylesync%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDave%5CDesktop%5Cnew_Stylesync&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();